version: '3.9'

services:
  # ============================================================================
  # Database Services
  # ============================================================================
  
  db:
    image: postgres:15-alpine
    container_name: metalqms_db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: ${DB_NAME:-metalqms}
      POSTGRES_USER: ${DB_USER:-metalqms}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-metalqms123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-metalqms} -d ${DB_NAME:-metalqms}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: metalqms_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # ============================================================================
  # Application Services
  # ============================================================================

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: metalqms_backend
    restart: unless-stopped
    volumes:
      - media_data:/app/media
      - logs_data:/app/logs
      - uploads_data:/app/uploads
      - ./docker/backend/settings:/app/settings
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-metalqms}:${DB_PASSWORD:-metalqms123}@db:5432/${DB_NAME:-metalqms}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-very-secret-key-here-change-in-production}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,backend}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - EMAIL_HOST=${EMAIL_HOST:-}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-}
      - CREATE_SUPERUSER=${CREATE_SUPERUSER:-false}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-admin123}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: metalqms_celery
    restart: unless-stopped
    command: celery -A config worker -l info --max-tasks-per-child=1000
    volumes:
      - media_data:/app/media
      - logs_data:/app/logs
      - uploads_data:/app/uploads
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-metalqms}:${DB_PASSWORD:-metalqms123}@db:5432/${DB_NAME:-metalqms}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-very-secret-key-here-change-in-production}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: metalqms_celery_beat
    restart: unless-stopped
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - logs_data:/app/logs
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-metalqms}:${DB_PASSWORD:-metalqms123}@db:5432/${DB_NAME:-metalqms}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-very-secret-key-here-change-in-production}
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: metalqms_flower
    restart: unless-stopped
    command: celery -A config flower --port=5555
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-metalqms}:${DB_PASSWORD:-metalqms123}@db:5432/${DB_NAME:-metalqms}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-very-secret-key-here-change-in-production}
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin123}
    depends_on:
      celery:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ============================================================================
  # Web Server
  # ============================================================================

  nginx:
    image: nginx:alpine
    container_name: metalqms_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - media_data:/media:ro
      - static_data:/static:ro
      - uploads_data:/uploads:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # ============================================================================
  # Monitoring Services
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: metalqms_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: metalqms_grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - metalqms_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ============================================================================
  # Backup Service
  # ============================================================================

  backup:
    image: postgres:15-alpine
    container_name: metalqms_backup
    restart: "no"
    volumes:
      - ./backups:/backups
      - ./docker/backup/scripts:/scripts:ro
    environment:
      - PGHOST=db
      - PGPORT=5432
      - PGUSER=${DB_USER:-metalqms}
      - PGPASSWORD=${DB_PASSWORD:-metalqms123}
      - PGDATABASE=${DB_NAME:-metalqms}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - metalqms_network
    profiles:
      - backup

# ============================================================================
# Networks
# ============================================================================

networks:
  metalqms_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local