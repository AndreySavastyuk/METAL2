#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –º–æ–¥—É–ª—è —Å–∫–ª–∞–¥–∞
"""
import os
import sys
import django
import requests
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from rest_framework.test import APIClient
from rest_framework import status
from apps.warehouse.models import Material, MaterialReceipt, Certificate


def test_warehouse_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–æ–¥—É–ª—è —Å–∫–ª–∞–¥–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–æ–¥—É–ª—è —Å–∫–ª–∞–¥–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ API
    client = APIClient()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    try:
        admin_user = User.objects.get(username='admin')
        client.force_authenticate(user=admin_user)
        print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {admin_user.username}")
    except User.DoesNotExist:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("\n" + "="*50)
    print("üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ú–ê–¢–ï–†–ò–ê–õ–û–í")
    print("="*50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    response = client.get('/api/v1/warehouse/materials/')
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(data.get('results', data))}")
        
        if data.get('results'):
            first_material = data['results'][0]
            print("–ü–æ–ª—è –≤ —Å–ø–∏—Å–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
            for key in first_material.keys():
                print(f"  - {key}")
        else:
            print("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.json())
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
    if Material.objects.exists():
        material = Material.objects.first()
        print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ {material.id}")
        
        response = client.get(f'/api/v1/warehouse/materials/{material.id}/')
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("–ü–æ–ª—è –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏:")
            for key in data.keys():
                print(f"  - {key}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ QR –∫–æ–¥–∞
            if data.get('qr_code_url'):
                print(f"‚úÖ QR –∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω: {data['qr_code_url']}")
            else:
                print("‚ö†Ô∏è QR –∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            if data.get('certificate'):
                print(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω: {data['certificate']['id']}")
            else:
                print("‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    new_material_data = {
        'material_grade': 'API-TEST-GRADE',
        'supplier': 'API –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
        'order_number': f'API-ORDER-{datetime.now().strftime("%Y%m%d%H%M%S")}',
        'certificate_number': f'API-CERT-{datetime.now().strftime("%Y%m%d%H%M%S")}',
        'heat_number': 'API-HEAT-12345',
        'size': 'API-‚åÄ100',
        'quantity': 500.0,
        'unit': 'kg',
        'location': 'API –¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞'
    }
    
    response = client.post(
        '/api/v1/warehouse/materials/',
        data=json.dumps(new_material_data),
        content_type='application/json'
    )
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 201:
        created_material = response.json()
        print(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω —Å ID: {created_material['id']}")
        print(f"External ID: {created_material['external_id']}")
        print(f"QR –∫–æ–¥: {created_material.get('qr_code_url', '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        test_material_id = created_material['id']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
        print(response.json())
        test_material_id = None
    
    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
    duplicate_data = new_material_data.copy()
    duplicate_data['material_grade'] = 'DUPLICATE-TEST'
    
    response = client.post(
        '/api/v1/warehouse/materials/',
        data=json.dumps(duplicate_data),
        content_type='application/json'
    )
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 400:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –¥—É–±–ª–∏–∫–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        error_data = response.json()
        if 'certificate_number' in error_data:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_data['certificate_number']}")
    else:
        print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 400, –ø–æ–ª—É—á–µ–Ω: {response.status_code}")
    
    # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    response = client.get('/api/v1/warehouse/materials/statistics/')
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        stats = response.json()
        print(f"‚úÖ –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {stats['total_materials']}")
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['total_quantity']}")
        print(f"–ü–æ –º–∞—Ä–∫–∞–º: {len(stats['by_grade'])} —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–æ–∫")
        print(f"–ü–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º: {len(stats['by_supplier'])} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        print(f"–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {stats['recent_receipts_count']}")
        print(f"–û–∂–∏–¥–∞—é—Ç –û–¢–ö: {stats['pending_qc_count']}")
    
    print("\n" + "="*50)
    print("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ü–†–ò–ï–ú–û–ö")
    print("="*50)
    
    # –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    if test_material_id:
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        receipt_data = {
            'material_id': test_material_id,
            'document_number': f'API-DOC-{datetime.now().strftime("%Y%m%d%H%M%S")}',
            'status': 'pending_qc',
            'notes': '–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç'
        }
        
        response = client.post(
            '/api/v1/warehouse/receipts/',
            data=json.dumps(receipt_data),
            content_type='application/json'
        )
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 201:
            receipt = response.json()
            print(f"‚úÖ –ü—Ä–∏–µ–º–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {receipt['id']}")
            print(f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {receipt['material']['material_grade']}")
            print(f"–ü—Ä–∏–Ω—è–ª: {receipt['received_by_full_name']}")
            print(f"–°—Ç–∞—Ç—É—Å: {receipt['status']}")
            
            test_receipt_id = receipt['id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–µ–º–∫–∏: {response.status_code}")
            print(response.json())
            test_receipt_id = None
    
    # –¢–µ—Å—Ç 7: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–µ–º–∫–∏
    if test_receipt_id:
        print(f"\n7Ô∏è‚É£ –¢–µ—Å—Ç: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–µ–º–∫–∏ {test_receipt_id}")
        status_data = {'status': 'in_qc'}
        
        response = client.post(
            f'/api/v1/warehouse/receipts/{test_receipt_id}/change_status/',
            data=json.dumps(status_data),
            content_type='application/json'
        )
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {result['old_status']} ‚Üí {result['new_status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–µ–º–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –û–¢–ö
    print("\n8Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–∏–µ–º–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –û–¢–ö")
    response = client.get('/api/v1/warehouse/receipts/pending_qc/')
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ü—Ä–∏–µ–º–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –û–¢–ö: {data['count']}")
    
    print("\n" + "="*50)
    print("üìÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í")
    print("="*50)
    
    # –¢–µ—Å—Ç 9: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    print("\n9Ô∏è‚É£ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    response = client.get('/api/v1/warehouse/certificates/')
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        certificates_count = len(data.get('results', data))
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {certificates_count}")
        
        if data.get('results') and len(data['results']) > 0:
            cert = data['results'][0]
            print("–ü–æ–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:")
            for key in cert.keys():
                print(f"  - {key}")
            
            if cert.get('download_url'):
                print(f"‚úÖ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {cert['download_url']}")
    
    # –¢–µ—Å—Ç 10: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\nüîü –¢–µ—Å—Ç: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    if test_material_id:
        bulk_data = {
            'material_ids': [test_material_id],
            'operation': 'change_location',
            'new_location': 'API –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
        }
        
        response = client.post(
            '/api/v1/warehouse/materials/bulk_operations/',
            data=json.dumps(bulk_data),
            content_type='application/json'
        )
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result['message']}")
            print(f"–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {result['affected_count']}")
    
    print("\n" + "="*50)
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –û–¢–ß–ï–¢–û–í")
    print("="*50)
    
    # –¢–µ—Å—Ç 11: –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
    print("\n1Ô∏è‚É£1Ô∏è‚É£ –¢–µ—Å—Ç: –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º")
    response = client.get('/api/v1/warehouse/reports/inventory_summary/')
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        report = response.json()
        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {report['total_positions']}")
        print(f"–û–±—â–∏–π –≤–µ—Å (–∫–≥): {report['total_quantity_kg']}")
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç): {report['total_quantity_pcs']}")
        print(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π: {len(report['by_location'])}")
        print(f"–ú–∞—Ä–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(report['by_grade'])}")
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö: {len(report['low_stock_alerts'])}")
    
    # –¢–µ—Å—Ç 12: –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    print("\n1Ô∏è‚É£2Ô∏è‚É£ –¢–µ—Å—Ç: –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ 7 –¥–Ω–µ–π")
    response = client.get('/api/v1/warehouse/reports/movement_history/?days=7')
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        history = response.json()
        print(f"‚úÖ –ü–µ—Ä–∏–æ–¥: {history['period_days']} –¥–Ω–µ–π")
        print(f"–í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–∫: {history['total_receipts']}")
        print(f"–î–Ω–µ–π —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º: {len(history['daily_movements'])}")
    
    # –¢–µ—Å—Ç 13: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
    print("\n1Ô∏è‚É£3Ô∏è‚É£ –¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫")
    
    # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    response = client.get('/api/v1/warehouse/materials/?search=API-TEST')
    print(f"–ü–æ–∏—Å–∫ –ø–æ 'API-TEST': {response.status_code}")
    if response.status_code == 200:
        results = response.json().get('results', [])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(results)}")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –µ–¥–∏–Ω–∏—Ü–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    response = client.get('/api/v1/warehouse/materials/?unit=kg')
    print(f"–§–∏–ª—å—Ç—Ä –ø–æ –µ–¥–∏–Ω–∏—Ü–µ 'kg': {response.status_code}")
    if response.status_code == 200:
        results = response.json().get('results', [])
        print(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –∫–≥: {len(results)}")
    
    # –¢–µ—Å—Ç 14: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£4Ô∏è‚É£ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    invalid_data = {
        'material_grade': '',  # –ü—É—Å—Ç–∞—è –º–∞—Ä–∫–∞
        'supplier': '–¢–µ—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫',
        'quantity': -10,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        'unit': 'invalid_unit'  # –ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    }
    
    response = client.post(
        '/api/v1/warehouse/materials/',
        data=json.dumps(invalid_data),
        content_type='application/json'
    )
    print(f"–°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {response.status_code}")
    
    if response.status_code == 400:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
        errors = response.json()
        print("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        for field, error_list in errors.items():
            print(f"  - {field}: {error_list}")
    
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    print("‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("  - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã)")
    print("  - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ")
    print("  - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    print("  - –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    print("  - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã")
    print("  - –ü—Ä–∏–µ–º–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    print("  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤")
    print("  - –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print("  - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫")
    print("  - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("  - API —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    
    print("\nüéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:")
    print("  - BaseAuditSerializer –¥–ª—è –ø–æ–ª–µ–π –∞—É–¥–∏—Ç–∞")
    print("  - –†–∞–∑–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è list/detail/create")
    print("  - –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
    print("  - –í–∞–ª–∏–¥–∞—Ü–∏—è PDF —Ñ–∞–π–ª–æ–≤ (—Ä–∞–∑–º–µ—Ä, —Ç–∏–ø)")
    print("  - SerializerMethodField –¥–ª—è URL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("  - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å select_related")
    print("  - –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏")
    print("  - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã")
    
    print("\nüåê API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: http://127.0.0.1:8000/api/docs/")


if __name__ == '__main__':
    test_warehouse_api() 