"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö MetalQMS
"""

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Group
from django.utils import timezone
from datetime import timedelta
import random

User = get_user_model()

class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ MetalQMS'

    def add_arguments(self, parser):
        parser.add_argument(
            '--materials',
            type=int,
            default=15,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15)'
        )
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö MetalQMS...'))

        if options['clear']:
            self.clear_test_data()

        self.create_users_and_groups()
        self.create_suppliers()
        self.create_material_grades()
        self.create_product_types()
        self.create_test_materials(options['materials'])
        self.create_ppsd_checklists()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        )
        self.show_access_info()

    def clear_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        from apps.warehouse.models import Material, MaterialReceipt, Supplier
        from apps.quality.models import QCInspection
        from apps.laboratory.models import LabTestRequest
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        Material.objects.filter(supplier__name__icontains='–¢–µ—Å—Ç').delete()
        Supplier.objects.filter(name__icontains='–¢–µ—Å—Ç').delete()
        
        self.stdout.write(self.style.SUCCESS('  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'))

    def create_users_and_groups(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø"""
        self.stdout.write('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø...')

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
        groups_data = [
            ('Warehouse', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–∫–ª–∞–¥–∞'),
            ('QC', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –û–¢–ö'),
            ('Laboratory', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏'),
            ('Production', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'),
            ('Management', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ')
        ]

        for group_name, description in groups_data:
            group, created = Group.objects.get_or_create(name=group_name)
            if created:
                self.stdout.write(f'  ‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞: {group_name}')

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = [
            {
                'username': 'warehouse',
                'email': 'warehouse@metalqms.com',
                'password': 'test123',
                'first_name': '–ò–≤–∞–Ω',
                'last_name': '–°–∫–ª–∞–¥–æ–≤',
                'groups': ['Warehouse']
            },
            {
                'username': 'qc_inspector',
                'email': 'qc@metalqms.com',
                'password': 'test123',
                'first_name': '–ü–µ—Ç—Ä',
                'last_name': '–ö–æ–Ω—Ç—Ä–æ–ª–µ–≤',
                'groups': ['QC']
            },
            {
                'username': 'lab_technician',
                'email': 'lab@metalqms.com',
                'password': 'test123',
                'first_name': '–ú–∞—Ä–∏—è',
                'last_name': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤–∞',
                'groups': ['Laboratory']
            },
            {
                'username': 'production',
                'email': 'production@metalqms.com',
                'password': 'test123',
                'first_name': '–°–µ—Ä–≥–µ–π',
                'last_name': '–ü—Ä–æ–∏–∑–≤–æ–¥–æ–≤',
                'groups': ['Production']
            },
            {
                'username': 'manager',
                'email': 'manager@metalqms.com',
                'password': 'test123',
                'first_name': '–ê–Ω–Ω–∞',
                'last_name': '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤–∞',
                'groups': ['Management']
            }
        ]

        for user_data in users_data:
            user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'email': user_data['email'],
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                    'is_active': True
                }
            )
            
            if created:
                user.set_password(user_data['password'])
                user.save()
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã
                for group_name in user_data['groups']:
                    group = Group.objects.get(name=group_name)
                    user.groups.add(group)
                
                self.stdout.write(f'  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.username}')

    def create_suppliers(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
        self.stdout.write('üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...')
        
        from apps.warehouse.models import Supplier
        
        suppliers_data = [
            {
                'name': '–ú–µ—Ç–∞–ª–ª–¢–æ—Ä–≥',
                'legal_name': '–û–û–û "–ú–µ—Ç–∞–ª–ª–¢–æ—Ä–≥"',
                'inn': '7701234567',
                'kpp': '770101001',
                'address': '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ú–µ—Ç–∞–ª–ª—É—Ä–≥–æ–≤, –¥. 10',
                'contact_person': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
                'phone': '+7 (495) 123-45-67',
                'email': 'orders@metalltorg.ru'
            },
            {
                'name': '–°–ø–µ—Ü–°—Ç–∞–ª—å',
                'legal_name': '–ê–û "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∞–ª–∏"',
                'inn': '7702345678',
                'kpp': '770201001',
                'address': '–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –°—Ç–∞–ª—å–Ω–æ–π, –¥. 25',
                'contact_person': '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
                'phone': '+7 (812) 234-56-78',
                'email': 'sales@specstal.ru'
            },
            {
                'name': '–£—Ä–∞–ª–ú–µ—Ç',
                'legal_name': '–ü–ê–û "–£—Ä–∞–ª—å—Å–∫–∏–π –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º–±–∏–Ω–∞—Ç"',
                'inn': '6603456789',
                'kpp': '660301001',
                'address': '–≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –£—Ä–∞–ª—å—Å–∫–∞—è, –¥. 50',
                'contact_person': '–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á',
                'phone': '+7 (343) 345-67-89',
                'email': 'metal@uralmet.ru'
            },
            {
                'name': '–°–∏–±–∏—Ä—å–ú–µ—Ç–∞–ª–ª',
                'legal_name': '–û–ê–û "–°–∏–±–∏—Ä—Å–∫–∏–π –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥"',
                'inn': '5404567890',
                'kpp': '540401001',
                'address': '–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ú–µ—Ç–∞–ª–ª–∏—Å—Ç–æ–≤, –¥. 33',
                'contact_person': '–ö–æ–∑–ª–æ–≤ –ê–Ω–¥—Ä–µ–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á',
                'phone': '+7 (383) 456-78-90',
                'email': 'supply@sibirmet.ru'
            }
        ]

        for supplier_data in suppliers_data:
            supplier, created = Supplier.objects.get_or_create(
                name=supplier_data['name'],
                defaults=supplier_data
            )
            if created:
                self.stdout.write(f'  ‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω: {supplier.name}')

    def create_material_grades(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        self.stdout.write('üî¨ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...')
        
        from apps.warehouse.models import MaterialGrade
        
        grades_data = [
            {'name': '40X', 'density': 7.85, 'description': '–°—Ç–∞–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–∞—è –ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'},
            {'name': '20X13', 'density': 7.70, 'description': '–°—Ç–∞–ª—å –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è –º–∞—Ä—Ç–µ–Ω—Å–∏—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞'},
            {'name': '12X18H10T', 'density': 7.90, 'description': '–°—Ç–∞–ª—å –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è –∞—É—Å—Ç–µ–Ω–∏—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞'},
            {'name': '09–ì2–°', 'density': 7.85, 'description': '–°—Ç–∞–ª—å –Ω–∏–∑–∫–æ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'},
            {'name': '–°—Ç3', 'density': 7.87, 'description': '–°—Ç–∞–ª—å —É–≥–ª–µ—Ä–æ–¥–∏—Å—Ç–∞—è –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞'},
            {'name': '45', 'density': 7.85, 'description': '–°—Ç–∞–ª—å —É–≥–ª–µ—Ä–æ–¥–∏—Å—Ç–∞—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è'},
            {'name': '30–•–ì–°–ê', 'density': 7.85, 'description': '–°—Ç–∞–ª—å –ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–ª—É—á—à–∞–µ–º–∞—è'},
            {'name': '65–ì', 'density': 7.85, 'description': '–°—Ç–∞–ª—å –ø—Ä—É–∂–∏–Ω–Ω–∞—è'},
        ]

        for grade_data in grades_data:
            grade, created = MaterialGrade.objects.get_or_create(
                name=grade_data['name'],
                defaults=grade_data
            )
            if created:
                self.stdout.write(f'  ‚úÖ –ú–∞—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {grade.name}')

    def create_product_types(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–∫–∞—Ç–∞"""
        self.stdout.write('üìè –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–∫–∞—Ç–∞...')
        
        from apps.warehouse.models import ProductType
        
        types_data = [
            {'name': '–ö—Ä—É–≥', 'description': '–ü—Ä–æ–∫–∞—Ç –∫—Ä—É–≥–ª–æ–≥–æ —Å–µ—á–µ–Ω–∏—è'},
            {'name': '–õ–∏—Å—Ç', 'description': '–õ–∏—Å—Ç–æ–≤–æ–π –ø—Ä–æ–∫–∞—Ç'},
            {'name': '–ü–æ–ª–æ—Å–∞', 'description': '–ü–æ–ª–æ—Å–æ–≤–æ–π –ø—Ä–æ–∫–∞—Ç'},
            {'name': '–£–≥–æ–ª–æ–∫', 'description': '–£–≥–ª–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å'},
            {'name': '–®–≤–µ–ª–ª–µ—Ä', 'description': '–ü-–æ–±—Ä–∞–∑–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å'},
            {'name': '–ë–∞–ª–∫–∞', 'description': '–î–≤—É—Ç–∞–≤—Ä–æ–≤–∞—è –±–∞–ª–∫–∞'},
            {'name': '–¢—Ä—É–±–∞', 'description': '–¢—Ä—É–±–Ω—ã–π –ø—Ä–æ–∫–∞—Ç'},
        ]

        for type_data in types_data:
            product_type, created = ProductType.objects.get_or_create(
                name=type_data['name'],
                defaults=type_data
            )
            if created:
                self.stdout.write(f'  ‚úÖ –¢–∏–ø –ø—Ä–æ–∫–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω: {product_type.name}')

    def create_test_materials(self, count):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        self.stdout.write(f'üì¶ –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...')
        
        from apps.warehouse.models import (
            Material, MaterialReceipt, Supplier, 
            MaterialGrade, ProductType
        )
        from apps.quality.models import QCInspection
        
        suppliers = list(Supplier.objects.all())
        grades = list(MaterialGrade.objects.all())
        product_types = list(ProductType.objects.all())
        
        if not suppliers or not grades or not product_types:
            self.stdout.write(
                self.style.ERROR('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –º–∞—Ä–∫–∏ –∏ —Ç–∏–ø—ã –ø—Ä–æ–∫–∞—Ç–∞')
            )
            return

        # –°—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        statuses = ['pending_qc', 'in_qc', 'qc_completed', 'in_laboratory', 'approved']
        
        # –†–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–∫–∞—Ç–∞
        sizes_by_type = {
            '–ö—Ä—É–≥': ['‚åÄ12', '‚åÄ16', '‚åÄ20', '‚åÄ25', '‚åÄ32', '‚åÄ40', '‚åÄ50', '‚åÄ63', '‚åÄ80', '‚åÄ100'],
            '–õ–∏—Å—Ç': ['2–º–º', '3–º–º', '4–º–º', '5–º–º', '6–º–º', '8–º–º', '10–º–º', '12–º–º', '16–º–º', '20–º–º'],
            '–ü–æ–ª–æ—Å–∞': ['20—Ö3', '25—Ö4', '30—Ö4', '40—Ö5', '50—Ö5', '60—Ö6', '80—Ö8', '100—Ö10'],
            '–£–≥–æ–ª–æ–∫': ['25—Ö25—Ö3', '32—Ö32—Ö4', '40—Ö40—Ö4', '50—Ö50—Ö5', '63—Ö63—Ö6', '75—Ö75—Ö8'],
            '–®–≤–µ–ª–ª–µ—Ä': ['10–ü', '12–ü', '14–ü', '16–ü', '18–ü', '20–ü', '22–ü', '24–ü'],
            '–ë–∞–ª–∫–∞': ['10–ë1', '12–ë1', '14–ë1', '16–ë1', '18–ë1', '20–ë1', '22–ë1'],
            '–¢—Ä—É–±–∞': ['‚åÄ32—Ö3', '‚åÄ42—Ö3', '‚åÄ48—Ö3', '‚åÄ57—Ö3', '‚åÄ76—Ö4', '‚åÄ89—Ö4', '‚åÄ108—Ö4'],
        }

        warehouse_user = User.objects.filter(username='warehouse').first()
        qc_user = User.objects.filter(username='qc_inspector').first()

        for i in range(count):
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            supplier = random.choice(suppliers)
            grade = random.choice(grades)
            product_type = random.choice(product_types)
            
            # –†–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–∫–∞—Ç–∞
            sizes = sizes_by_type.get(product_type.name, ['—Ä–∞–∑–º–µ—Ä'])
            size = random.choice(sizes)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            material = Material.objects.create(
                material_grade=grade.name,
                supplier=supplier.name,
                order_number=f'–ó–ö-2024-{1000 + i:04d}',
                certificate_number=f'CERT-{2024000 + i:06d}',
                heat_number=f'–ü{240000 + i:06d}',
                size=size,
                quantity=round(random.uniform(0.1, 10.0), 3),
                unit=random.choice(['—Ç', '–∫–≥', '—à—Ç', '–º']),
                notes=f'–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{i+1}',
                created_by=warehouse_user,
                updated_by=warehouse_user
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            receipt_date = timezone.now() - timedelta(days=random.randint(0, 30))
            receipt = MaterialReceipt.objects.create(
                material=material,
                document_number=f'–ü–ù-{2024000 + i:06d}',
                receipt_date=receipt_date,
                received_by=warehouse_user,
                notes=f'–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material.material_grade}',
                status=random.choice(statuses),
                created_by=warehouse_user,
                updated_by=warehouse_user
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –¥–ª—è —á–∞—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            if random.random() > 0.3:  # 70% –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–º–µ—é—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏
                inspection_statuses = ['draft', 'in_progress', 'completed']
                requires_ppsd = random.choice([True, False])
                
                inspection = QCInspection.objects.create(
                    material_receipt=receipt,
                    inspector=qc_user,
                    inspection_date=receipt_date + timedelta(hours=random.randint(1, 48)),
                    status=random.choice(inspection_statuses),
                    requires_ppsd=requires_ppsd,
                    visual_inspection=random.choice(['passed', 'failed', 'conditional']),
                    dimension_check=random.choice(['passed', 'failed', 'conditional']),
                    surface_quality=random.choice(['passed', 'failed', 'conditional']),
                    marking_check=random.choice(['passed', 'failed', 'conditional']),
                    packaging_check=random.choice(['passed', 'failed', 'conditional']),
                    notes=f'–ò–Ω—Å–ø–µ–∫—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material.material_grade} - {size}',
                    created_by=qc_user,
                    updated_by=qc_user
                )
            
            if (i + 1) % 5 == 0:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {i + 1} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...')

        self.stdout.write(self.style.SUCCESS(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'))

    def create_ppsd_checklists(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –ü–ü–°–î"""
        self.stdout.write('üìã –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –ü–ü–°–î...')
        
        from apps.quality.models import PPSDChecklist
        
        checklists_data = [
            {
                'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–ª–∏',
                'description': '–ë–∞–∑–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π',
                'checklist_items': [
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å —É–ø–∞–∫–æ–≤–∫–∏',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏'
                ]
            },
            {
                'name': '–ù–µ—Ä–∂–∞–≤–µ—é—â–∏–µ —Å—Ç–∞–ª–∏',
                'description': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –Ω–µ—Ä–∂–∞–≤–µ—é—â–∏—Ö —Å—Ç–∞–ª–µ–π',
                'checklist_items': [
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω–æ–π —Å—Ç–æ–π–∫–æ—Å—Ç–∏',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å —É–ø–∞–∫–æ–≤–∫–∏'
                ]
            },
            {
                'name': '–õ–∏—Å—Ç–æ–≤–æ–π –ø—Ä–æ–∫–∞—Ç',
                'description': '–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–∫–∞—Ç–∞',
                'checklist_items': [
                    '–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã –ª–∏—Å—Ç–∞',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–Ω–æ—Å—Ç–∏',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫—Ä–æ–º–æ–∫',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–∏—Å—Ç–∞',
                    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏'
                ]
            }
        ]

        for checklist_data in checklists_data:
            checklist, created = PPSDChecklist.objects.get_or_create(
                name=checklist_data['name'],
                defaults={
                    'description': checklist_data['description'],
                    'checklist_items': checklist_data['checklist_items']
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –ß–µ–∫-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {checklist.name}')

    def show_access_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–∞—Ö"""
        info = """
üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!

üë• –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
   üë§ admin          / admin123     (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
   üì¶ warehouse      / test123      (–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–ª–∞–¥–∞)
   üîç qc_inspector   / test123      (–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –û–¢–ö)
   üß™ lab_technician / test123      (–õ–∞–±–æ—Ä–∞–Ω—Ç)
   üè≠ production     / test123      (–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
   üëî manager        / test123      (–ú–µ–Ω–µ–¥–∂–µ—Ä)

üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: –ú–µ—Ç–∞–ª–ª–¢–æ—Ä–≥, –°–ø–µ—Ü–°—Ç–∞–ª—å, –£—Ä–∞–ª–ú–µ—Ç, –°–∏–±–∏—Ä—å–ú–µ—Ç–∞–ª–ª
üî¨ –ú–∞—Ä–∫–∏ —Å—Ç–∞–ª–∏: 40X, 20X13, 12X18H10T, 09–ì2–°, –°—Ç3, 45, 30–•–ì–°–ê, 65–ì
üìè –¢–∏–ø—ã –ø—Ä–æ–∫–∞—Ç–∞: –ö—Ä—É–≥, –õ–∏—Å—Ç, –ü–æ–ª–æ—Å–∞, –£–≥–æ–ª–æ–∫, –®–≤–µ–ª–ª–µ—Ä, –ë–∞–ª–∫–∞, –¢—Ä—É–±–∞

üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
   python start_metalqms.py
        """
        
        self.stdout.write(self.style.SUCCESS(info))