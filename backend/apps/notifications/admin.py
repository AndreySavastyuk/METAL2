"""
–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""
from django.contrib import admin
from django.utils.html import format_html
from django.urls import path, reverse
from django.shortcuts import render, redirect
from django.contrib import messages
from django.http import JsonResponse, HttpResponseRedirect
from django.utils.safestring import mark_safe
from django.utils import timezone
from .models import UserNotificationPreferences, NotificationLog
from .tasks import test_telegram_connection, send_telegram_message
import json


@admin.register(UserNotificationPreferences)
class UserNotificationPreferencesAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    list_display = [
        'user', 'telegram_chat_id', 'is_telegram_enabled', 
        'get_enabled_notifications', 'quiet_hours_display', 'updated_at'
    ]
    list_filter = ['is_telegram_enabled', 'language', 'created_at']
    search_fields = ['user__username', 'user__first_name', 'user__last_name', 'telegram_chat_id']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
            'fields': ('user',)
        }),
        ('Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('telegram_chat_id', 'is_telegram_enabled'),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram'
        }),
        ('–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
            'fields': ('notification_types_display', 'notification_types'),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        }),
        ('–¢–∏—Ö–∏–µ —á–∞—Å—ã', {
            'fields': ('quiet_hours_start', 'quiet_hours_end'),
            'description': '–ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        }),
        ('–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('timezone', 'language'),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
    
    def get_enabled_notifications(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not obj.notification_types:
            return "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        enabled = []
        for notif_type, settings in obj.notification_types.items():
            if settings.get('enabled', False):
                name = dict(UserNotificationPreferences.NOTIFICATION_TYPES).get(notif_type, notif_type)
                if settings.get('urgent_only', False):
                    name += " (—Ç–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ)"
                enabled.append(name)
        
        if enabled:
            return mark_safe('<br>'.join(enabled))
        return "–í—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    get_enabled_notifications.short_description = '–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    
    def quiet_hours_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤"""
        if obj.quiet_hours_start and obj.quiet_hours_end:
            return f"{obj.quiet_hours_start.strftime('%H:%M')} - {obj.quiet_hours_end.strftime('%H:%M')}"
        return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    quiet_hours_display.short_description = '–¢–∏—Ö–∏–µ —á–∞—Å—ã'
    
    def notification_types_display(self, obj):
        """–ß–∏—Ç–∞–µ–º–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not obj.notification_types:
            return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        display = []
        for notif_type, settings in obj.notification_types.items():
            name = dict(UserNotificationPreferences.NOTIFICATION_TYPES).get(notif_type, notif_type)
            enabled = "‚úÖ" if settings.get('enabled', False) else "‚ùå"
            urgent_only = " (—Ç–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ)" if settings.get('urgent_only', False) else ""
            display.append(f"{enabled} {name}{urgent_only}")
        
        return mark_safe('<br>'.join(display))
    
    notification_types_display.short_description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    
    def get_urls(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        urls = super().get_urls()
        custom_urls = [
            path('test-telegram/', self.admin_site.admin_view(self.test_telegram_view), 
                 name='notifications_test_telegram'),
            path('<int:object_id>/send-test/', self.admin_site.admin_view(self.send_test_notification), 
                 name='notifications_send_test'),
        ]
        return custom_urls + urls
    
    def test_telegram_view(self, request):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        if request.method == 'POST':
            result = test_telegram_connection.delay()
            result_data = result.get(timeout=10)
            
            if result_data['status'] == 'success':
                messages.success(request, f"Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ: @{result_data['bot_info']['username']}")
            else:
                messages.error(request, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result_data['message']}")
            
            return redirect('admin:notifications_usernotificationpreferences_changelist')
        
        return render(request, 'admin/notifications/test_telegram.html')
    
    def send_test_notification(self, request, object_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        preferences = self.get_object(request, object_id)
        
        if not preferences:
            messages.error(request, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return redirect('admin:notifications_usernotificationpreferences_changelist')
        
        if not preferences.telegram_chat_id:
            messages.error(request, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω Telegram Chat ID")
            return redirect('admin:notifications_usernotificationpreferences_changelist')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        from .services import telegram_service
        log = telegram_service._create_notification_log(
            user=preferences.user,
            notification_type='test',
            message=(
                f"üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, {preferences.user.get_full_name() or preferences.user.username}!\n\n"
                f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã MetalQMS.\n"
                f"–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n"
                f"üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {timezone.now().strftime('%d.%m.%Y %H:%M')}"
            ),
            chat_id=preferences.telegram_chat_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Celery
        send_telegram_message.delay(log.id)
        
        messages.success(request, f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {preferences.user.username}")
        return redirect('admin:notifications_usernotificationpreferences_changelist')
    
    actions = ['enable_telegram', 'disable_telegram', 'reset_notification_settings']
    
    def enable_telegram(self, request, queryset):
        """–í–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        updated = queryset.update(is_telegram_enabled=True)
        messages.success(request, f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    enable_telegram.short_description = "–í–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    def disable_telegram(self, request, queryset):
        """–û—Ç–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        updated = queryset.update(is_telegram_enabled=False)
        messages.success(request, f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    disable_telegram.short_description = "–û—Ç–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    def reset_notification_settings(self, request, queryset):
        """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_settings = {
            'status_update': {'enabled': True, 'urgent_only': False},
            'task_assignment': {'enabled': True, 'urgent_only': False},
            'urgent_alert': {'enabled': True, 'urgent_only': False},
            'daily_summary': {'enabled': False, 'urgent_only': False},
        }
        
        updated = 0
        for preferences in queryset:
            preferences.notification_types = default_settings
            preferences.save()
            updated += 1
        
        messages.success(request, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    reset_notification_settings.short_description = "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"


@admin.register(NotificationLog)
class NotificationLogAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    list_display = [
        'user', 'notification_type', 'status', 'telegram_chat_id', 
        'retry_count', 'sent_at', 'created_at'
    ]
    list_filter = [
        'status', 'notification_type', 'created_at', 'sent_at'
    ]
    search_fields = [
        'user__username', 'user__first_name', 'user__last_name', 
        'telegram_chat_id', 'message'
    ]
    readonly_fields = [
        'user', 'notification_type', 'message', 'telegram_chat_id',
        'status', 'error_message', 'retry_count', 'sent_at', 
        'created_at', 'updated_at', 'object_type', 'object_id'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user', 'notification_type', 'status')
        }),
        ('Telegram', {
            'fields': ('telegram_chat_id', 'message')
        }),
        ('–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏', {
            'fields': ('retry_count', 'sent_at', 'error_message')
        }),
        ('–°–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç', {
            'fields': ('object_type', 'object_id'),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
    
    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        return False
    
    def has_change_permission(self, request, obj=None):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        return False
    
    def has_delete_permission(self, request, obj=None):
        """–†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        return request.user.is_superuser
    
    actions = ['retry_failed_notifications', 'mark_as_sent']
    
    def retry_failed_notifications(self, request, queryset):
        """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        failed_logs = queryset.filter(status='failed')
        
        retried = 0
        for log in failed_logs:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            if 'Forbidden' in log.error_message or 'Bad Request' in log.error_message:
                continue
            
            log.status = 'retry'
            log.retry_count += 1
            log.save()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
            send_telegram_message.delay(log.id)
            retried += 1
        
        messages.success(request, f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {retried} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    retry_failed_notifications.short_description = "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö"
    
    def mark_as_sent(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        from django.utils import timezone
        
        updated = queryset.update(
            status='sent',
            sent_at=timezone.now(),
            error_message=''
        )
        messages.success(request, f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ: {updated} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    mark_as_sent.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ"


# –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
class NotificationStatsAdmin(admin.ModelAdmin):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def changelist_view(self, request, extra_context=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from django.db.models import Count, Q
        from datetime import datetime, timedelta
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = timezone.now() - timedelta(days=30)
        
        stats = NotificationLog.objects.filter(
            created_at__gte=thirty_days_ago
        ).aggregate(
            total=Count('id'),
            sent=Count('id', filter=Q(status='sent')),
            failed=Count('id', filter=Q(status='failed')),
            pending=Count('id', filter=Q(status='pending'))
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_stats = NotificationLog.objects.filter(
            created_at__gte=thirty_days_ago
        ).values('notification_type').annotate(
            count=Count('id'),
            success_rate=Count('id', filter=Q(status='sent')) * 100 / Count('id')
        ).order_by('-count')
        
        extra_context = extra_context or {}
        extra_context.update({
            'stats': stats,
            'type_stats': type_stats,
            'success_rate': round(stats['sent'] * 100 / stats['total'], 2) if stats['total'] > 0 else 0
        })
        
        return render(request, 'admin/notifications/stats.html', extra_context)


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π URL
# –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ URL patterns –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è