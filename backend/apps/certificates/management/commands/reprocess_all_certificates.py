"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
"""
import time
from typing import List, Dict, Any
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.db.models import Q, Count
from django.utils import timezone
from apps.warehouse.models import Certificate
from apps.certificates.models import CertificateSearchIndex, CertificatePreview
from apps.certificates.tasks import (
    process_uploaded_certificate, 
    reprocess_certificates_batch,
    cleanup_failed_processing
)


class Command(BaseCommand):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    python manage.py reprocess_all_certificates
    
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–Ω–æ–≤–æ
    python manage.py reprocess_all_certificates --force
    
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    python manage.py reprocess_all_certificates --ids 1,2,3
    
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    python manage.py reprocess_all_certificates --text-only
    
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é
    python manage.py reprocess_all_certificates --preview-only
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Celery
    python manage.py reprocess_all_certificates --async
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    python manage.py reprocess_all_certificates --batch-size 50
    """
    
    help = '–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é'
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –≤–∫–ª—é—á–∞—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ'
        )
        
        parser.add_argument(
            '--ids',
            type=str,
            help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'
        )
        
        parser.add_argument(
            '--batch-size',
            type=int,
            default=10,
            help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)'
        )
        
        # –†–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        parser.add_argument(
            '--text-only',
            action='store_true',
            help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö'
        )
        
        parser.add_argument(
            '--preview-only',
            action='store_true',
            help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é'
        )
        
        # –°–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        parser.add_argument(
            '--async',
            action='store_true',
            help='–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Celery (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)'
        )
        
        parser.add_argument(
            '--workers',
            type=int,
            default=1,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)'
        )
        
        # –§–∏–ª—å—Ç—Ä—ã
        parser.add_argument(
            '--failed-only',
            action='store_true',
            help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏'
        )
        
        parser.add_argument(
            '--missing-preview',
            action='store_true',
            help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑ –ø—Ä–µ–≤—å—é'
        )
        
        parser.add_argument(
            '--missing-text',
            action='store_true',
            help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É'
        )
        
        parser.add_argument(
            '--cleanup',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–∏—Å—à–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º'
        )
        
        parser.add_argument(
            '--stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        )
    
    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        
        self.options = options
        self.start_time = time.time()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if options['stats']:
            self.show_statistics()
            return
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        if options['cleanup']:
            self.stdout.write("üßπ –û—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            cleanup_failed_processing.delay()
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        certificates = self.get_certificates_to_process()
        
        if not certificates:
            self.stdout.write(
                self.style.WARNING("‚úÖ –ù–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            )
            return
        
        self.stdout.write(
            f"üìã –ù–∞–π–¥–µ–Ω–æ {len(certificates)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )
        
        # Dry run - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        if options['dry_run']:
            self.show_dry_run(certificates)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        if options['async']:
            self.process_async(certificates)
        else:
            self.process_sync(certificates)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_final_stats()
    
    def get_certificates_to_process(self) -> List[Certificate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        queryset = Certificate.objects.all()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID
        if self.options['ids']:
            try:
                ids = [int(id.strip()) for id in self.options['ids'].split(',')]
                queryset = queryset.filter(id__in=ids)
                self.stdout.write(f"üéØ –§–∏–ª—å—Ç—Ä –ø–æ ID: {ids}")
            except ValueError:
                raise CommandError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --ids 1,2,3")
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if not self.options['force']:
            if self.options['failed_only']:
                queryset = queryset.filter(
                    Q(search_index__processing_status='failed') |
                    Q(preview__generation_status='failed')
                )
                self.stdout.write("üî¥ –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ")
            
            elif self.options['missing_preview']:
                queryset = queryset.filter(
                    Q(preview__isnull=True) |
                    Q(preview__generation_status__in=['failed', 'pending'])
                )
                self.stdout.write("üñºÔ∏è –§–∏–ª—å—Ç—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–≤—å—é")
            
            elif self.options['missing_text']:
                queryset = queryset.filter(
                    Q(search_index__isnull=True) |
                    Q(search_index__processing_status__in=['failed', 'pending']) |
                    Q(search_index__extracted_text='')
                )
                self.stdout.write("üìù –§–∏–ª—å—Ç—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç")
            
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                queryset = queryset.exclude(
                    search_index__processing_status='completed'
                )
                self.stdout.write("‚è≥ –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        queryset = queryset.select_related('material').order_by('-uploaded_at')
        
        return list(queryset)
    
    def show_dry_run(self, certificates: List[Certificate]):
        """–ü–æ–∫–∞–∑ —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ dry-run —Ä–µ–∂–∏–º–µ"""
        
        self.stdout.write(
            self.style.WARNING("üîç DRY RUN - –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        )
        
        for i, cert in enumerate(certificates[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            material = cert.material
            status_info = self.get_certificate_status(cert)
            
            self.stdout.write(
                f"  {i}. ID: {cert.id} | "
                f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {material.material_grade} | "
                f"–§–∞–π–ª: {cert.pdf_file.name if cert.pdf_file else '–ù–ï–¢'} | "
                f"–°—Ç–∞—Ç—É—Å: {status_info}"
            )
        
        if len(certificates) > 20:
            self.stdout.write(f"  ... –∏ –µ—â–µ {len(certificates) - 20} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
        operations = []
        if not self.options['preview_only']:
            operations.append("–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥")
        if not self.options['text_only']:
            operations.append("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é")
        
        self.stdout.write(f"\nüîß –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {', '.join(operations)}")
        
        if self.options['async']:
            self.stdout.write("‚ö° –†–µ–∂–∏–º: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Celery")
        else:
            self.stdout.write(f"üîÑ –†–µ–∂–∏–º: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ({self.options['workers']} –≤–æ—Ä–∫–µ—Ä–æ–≤)")
    
    def get_certificate_status(self, certificate: Certificate) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        status_parts = []
        
        # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç–∞
        try:
            search_index = certificate.search_index
            if search_index.processing_status == 'completed':
                status_parts.append("–¢–µ–∫—Å—Ç: ‚úÖ")
            elif search_index.processing_status == 'failed':
                status_parts.append("–¢–µ–∫—Å—Ç: ‚ùå")
            else:
                status_parts.append(f"–¢–µ–∫—Å—Ç: ‚è≥{search_index.processing_status}")
        except:
            status_parts.append("–¢–µ–∫—Å—Ç: ‚≠ï")
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–µ–≤—å—é
        try:
            preview = certificate.preview
            if preview.generation_status == 'completed':
                status_parts.append("–ü—Ä–µ–≤—å—é: ‚úÖ")
            elif preview.generation_status == 'failed':
                status_parts.append("–ü—Ä–µ–≤—å—é: ‚ùå")
            else:
                status_parts.append(f"–ü—Ä–µ–≤—å—é: ‚è≥{preview.generation_status}")
        except:
            status_parts.append("–ü—Ä–µ–≤—å—é: ‚≠ï")
        
        return " | ".join(status_parts)
    
    def process_async(self, certificates: List[Certificate]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Celery"""
        
        self.stdout.write(
            self.style.SUCCESS("‚ö° –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Celery...")
        )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã
        batch_size = self.options['batch_size']
        certificate_ids = [cert.id for cert in certificates]
        
        batches = [
            certificate_ids[i:i + batch_size] 
            for i in range(0, len(certificate_ids), batch_size)
        ]
        
        self.stdout.write(f"üì¶ –°–æ–∑–¥–∞–Ω–æ {len(batches)} –ø–∞–∫–µ—Ç–æ–≤ –ø–æ {batch_size} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–∫–µ—Ç—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        for i, batch in enumerate(batches, 1):
            self.stdout.write(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–∞ {i}/{len(batches)}: {len(batch)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
            
            if self.options['text_only']:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞
                for cert_id in batch:
                    process_uploaded_certificate.delay(cert_id)
            elif self.options['preview_only']:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é
                from apps.certificates.tasks import generate_certificate_preview
                for cert_id in batch:
                    generate_certificate_preview.delay(cert_id)
            else:
                # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–æ–º
                reprocess_certificates_batch.delay(batch, force_reprocess=self.options['force'])
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
            if i < len(batches):
                time.sleep(1)
        
        self.stdout.write(
            self.style.SUCCESS(
                f"‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(certificates)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤\n"
                f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ª–æ–≥–∞—Ö Celery –∏–ª–∏ Django –∞–¥–º–∏–Ω–∫–µ"
            )
        )
    
    def process_sync(self, certificates: List[Certificate]):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        
        self.stdout.write(
            self.style.SUCCESS("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        )
        
        processed = 0
        errors = 0
        skipped = 0
        
        from apps.certificates.services import certificate_processor
        
        for i, certificate in enumerate(certificates, 1):
            try:
                self.stdout.write(
                    f"üìÑ [{i}/{len(certificates)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {certificate.id} "
                    f"({certificate.material.material_grade})..."
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not certificate.pdf_file:
                    self.stdout.write(
                        self.style.WARNING(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PDF —Ñ–∞–π–ª")
                    )
                    skipped += 1
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                if not self.options['preview_only']:
                    success = self.process_certificate_text(certificate)
                    if not success:
                        errors += 1
                        continue
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é
                if not self.options['text_only']:
                    success = self.process_certificate_preview(certificate)
                    if not success:
                        errors += 1
                        continue
                
                processed += 1
                self.stdout.write(
                    self.style.SUCCESS(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                )
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
                )
                errors += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(
            self.style.SUCCESS(
                f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}\n"
                f"  ‚ùå –û—à–∏–±–æ–∫: {errors}\n"
                f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}\n"
                f"  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {processed / len(certificates) * 100:.1f}%"
            )
        )
    
    def process_certificate_text(self, certificate: Certificate) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        try:
            from apps.certificates.services import certificate_processor
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = certificate_processor.extract_text_from_pdf(certificate.pdf_file.path)
            if not text:
                self.stdout.write("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
                return False
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            parsed_data = certificate_processor.parse_certificate_data(text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
            search_index, created = CertificateSearchIndex.objects.get_or_create(
                certificate=certificate,
                defaults={'processing_status': 'completed'}
            )
            
            search_index.extracted_text = text
            search_index.grade = parsed_data.get('grade', '')
            search_index.heat_number = parsed_data.get('heat_number', '')
            search_index.certificate_number = parsed_data.get('certificate_number', '')
            search_index.supplier = parsed_data.get('supplier', '')
            search_index.chemical_composition = parsed_data.get('chemical_composition', {})
            search_index.mechanical_properties = parsed_data.get('mechanical_properties', {})
            search_index.test_results = parsed_data.get('test_results', {})
            search_index.processing_status = 'completed'
            search_index.error_message = ''
            search_index.save()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
            certificate.parsed_data.update({
                'processed_at': timezone.now().isoformat(),
                'processing_version': '1.0',
                **parsed_data
            })
            certificate.save(update_fields=['parsed_data'])
            
            self.stdout.write(f"    üìù –¢–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            if parsed_data.get('grade'):
                self.stdout.write(f"    üîç –ù–∞–π–¥–µ–Ω–∞ –º–∞—Ä–∫–∞: {parsed_data['grade']}")
            
            return True
            
        except Exception as e:
            self.stdout.write(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def process_certificate_preview(self, certificate: Certificate) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –æ–¥–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        try:
            from apps.certificates.services import certificate_processor
            
            preview_url = certificate_processor.generate_certificate_preview(certificate.pdf_file)
            
            if preview_url:
                self.stdout.write(f"    üñºÔ∏è –ü—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                return True
            else:
                self.stdout.write("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é")
                return False
                
        except Exception as e:
            self.stdout.write(f"    ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {e}")
            return False
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        self.stdout.write(
            self.style.SUCCESS("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í")
        )
        self.stdout.write("=" * 50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_certs = Certificate.objects.count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
        with_text = CertificateSearchIndex.objects.filter(
            processing_status='completed'
        ).count()
        failed_text = CertificateSearchIndex.objects.filter(
            processing_status='failed'
        ).count()
        pending_text = CertificateSearchIndex.objects.filter(
            processing_status='pending'
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–≤—å—é
        with_preview = CertificatePreview.objects.filter(
            generation_status='completed'
        ).count()
        failed_preview = CertificatePreview.objects.filter(
            generation_status='failed'
        ).count()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stdout.write(f"üìÑ –í—Å–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {total_certs}")
        self.stdout.write(f"")
        self.stdout.write(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞:")
        self.stdout.write(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {with_text} ({with_text/total_certs*100:.1f}%)")
        self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∏: {failed_text}")
        self.stdout.write(f"  ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_text}")
        self.stdout.write(f"  ‚≠ï –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_certs - with_text - failed_text - pending_text}")
        self.stdout.write(f"")
        self.stdout.write(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é:")
        self.stdout.write(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {with_preview} ({with_preview/total_certs*100:.1f}%)")
        self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∏: {failed_preview}")
        self.stdout.write(f"  ‚≠ï –ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_certs - with_preview - failed_preview}")
        
        # –¢–æ–ø-–ø—Ä–æ–±–ª–µ–º—ã
        self.stdout.write(f"")
        self.stdout.write("üîç –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:")
        
        error_stats = CertificateSearchIndex.objects.filter(
            processing_status='failed'
        ).values('error_message').annotate(
            count=Count('id')
        ).order_by('-count')[:5]
        
        for error in error_stats:
            self.stdout.write(f"  ‚Ä¢ {error['error_message'][:50]}... ({error['count']} —Ä–∞–∑)")
    
    def show_final_stats(self):
        """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        elapsed = time.time() - self.start_time
        
        self.stdout.write(
            self.style.SUCCESS(
                f"\nüéâ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥"
            )
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if not self.options['dry_run']:
            self.stdout.write("\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            self.show_statistics()