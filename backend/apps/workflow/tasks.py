"""
Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SLA –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —ç—Å–∫–∞–ª–∞—Ü–∏–π
"""
from celery import shared_task
from django.utils import timezone
from django.contrib.auth.models import User
from django.conf import settings
from datetime import timedelta
import logging

from .models import MaterialInspectionProcess, WorkflowSLAViolation, WorkflowTaskLog
from apps.warehouse.services import NotificationService

logger = logging.getLogger(__name__)


@shared_task(bind=True, max_retries=3)
def monitor_sla_violations(self):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Ä—É—à–µ–Ω–∏–π SLA –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    """
    try:
        logger.info("–ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SLA –Ω–∞—Ä—É—à–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        active_processes = MaterialInspectionProcess.objects.filter(
            status=MaterialInspectionProcess.STATUS.ACTIVE,
            sla_deadline__isnull=False
        )
        
        violations_created = 0
        warnings_sent = 0
        
        for process in active_processes:
            violation_created, warning_sent = check_process_sla(process)
            
            if violation_created:
                violations_created += 1
            if warning_sent:
                warnings_sent += 1
        
        logger.info(
            f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SLA –∑–∞–≤–µ—Ä—à–µ–Ω. "
            f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {violations_created}, "
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_sent}"
        )
        
        return {
            'success': True,
            'violations_created': violations_created,
            'warnings_sent': warnings_sent,
            'processes_checked': active_processes.count()
        }
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SLA: {exc}")
        self.retry(countdown=60, exc=exc)


def check_process_sla(process):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ SLA –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    
    Returns:
        tuple: (violation_created, warning_sent)
    """
    violation_created = False
    warning_sent = False
    
    sla_status = process.get_sla_status()
    now = timezone.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    existing_violation = process.sla_violations.filter(status='active').first()
    
    if sla_status == 'overdue':
        # –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
        if not existing_violation or existing_violation.violation_type != 'overdue':
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            if existing_violation:
                existing_violation.violation_type = 'overdue'
                existing_violation.message = f"–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ {process.get_time_remaining()}"
                existing_violation.save()
            else:
                WorkflowSLAViolation.objects.create(
                    process=process,
                    violation_type='overdue',
                    message=f"–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω. Deadline: {process.sla_deadline}",
                    created_by=process.current_assignee or process.initiator,
                    updated_by=process.current_assignee or process.initiator
                )
                violation_created = True
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–µ
            escalate_overdue_process.delay(process.id)
            warning_sent = True
    
    elif sla_status == 'critical':
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏)
        if not existing_violation or existing_violation.violation_type == 'warning':
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            if existing_violation:
                existing_violation.violation_type = 'critical'
                existing_violation.message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SLA. –û—Å—Ç–∞–µ—Ç—Å—è: {process.get_time_remaining()}"
                existing_violation.save()
            else:
                WorkflowSLAViolation.objects.create(
                    process=process,
                    violation_type='critical',
                    message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SLA. Deadline: {process.sla_deadline}",
                    created_by=process.current_assignee or process.initiator,
                    updated_by=process.current_assignee or process.initiator
                )
                violation_created = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            send_sla_warning.delay(process.id, 'critical')
            warning_sent = True
    
    elif sla_status == 'warning':
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–æ—Å—Ç–∞–µ—Ç—Å—è 50% –≤—Ä–µ–º–µ–Ω–∏)
        if not existing_violation:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            WorkflowSLAViolation.objects.create(
                process=process,
                violation_type='warning',
                message=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ SLA. –û—Å—Ç–∞–µ—Ç—Å—è: {process.get_time_remaining()}",
                created_by=process.current_assignee or process.initiator,
                updated_by=process.current_assignee or process.initiator
            )
            violation_created = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            send_sla_warning.delay(process.id, 'warning')
            warning_sent = True
    
    return violation_created, warning_sent


@shared_task(bind=True, max_retries=3)
def escalate_overdue_process(self, process_id):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    try:
        process = MaterialInspectionProcess.objects.get(id=process_id)
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞
        old_priority = process.priority
        process.escalate(
            reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –∏–∑-–∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ SLA",
            escalated_by=process.current_assignee or process.initiator
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
        WorkflowTaskLog.log_task_action(
            process=process,
            task_name="Automatic Escalation",
            task_id="auto_escalation",
            action="escalated",
            performer=process.current_assignee or process.initiator,
            comment=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è: {old_priority} ‚Üí {process.priority}",
            metadata={
                'escalation_reason': 'SLA overdue',
                'old_priority': old_priority,
                'new_priority': process.priority,
                'overdue_time': str(timezone.now() - process.sla_deadline)
            }
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        notify_managers_about_escalation.delay(process_id)
        
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω")
        
        return {'success': True, 'process_id': process_id}
        
    except MaterialInspectionProcess.DoesNotExist:
        logger.error(f"–ü—Ä–æ—Ü–µ—Å—Å {process_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏")
        return {'success': False, 'error': 'Process not found'}
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id}: {exc}")
        self.retry(countdown=60, exc=exc)


@shared_task(bind=True, max_retries=3)
def send_sla_warning(self, process_id, warning_type):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ SLA
    """
    try:
        process = MaterialInspectionProcess.objects.get(id=process_id)
        material = process.material_receipt.material
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if warning_type == 'critical':
            emoji = "üö®"
            title = "–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ SLA"
            urgency = "–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï"
        else:
            emoji = "‚ö†Ô∏è"
            title = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ SLA"
            urgency = "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
        
        message = (
            f"{emoji} {title}\n"
            f"üìã –ü—Ä–æ—Ü–µ—Å—Å: #{process.id}\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material.material_grade}\n"
            f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {material.supplier}\n"
            f"‚è∞ Deadline: {process.sla_deadline.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {process.get_time_remaining()}\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {process.current_assignee.username if process.current_assignee else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {process.progress_percentage}%\n"
            f"üö® –°—Ç–∞—Ç—É—Å: {urgency}"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients = []
        
        # –¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if process.current_assignee:
            recipients.append(process.current_assignee)
        
        # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞
        if process.initiator and process.initiator != process.current_assignee:
            recipients.append(process.initiator)
        
        # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if warning_type == 'critical':
            from django.contrib.auth.models import Group
            manager_group = Group.objects.filter(name__in=['manager', '–º–µ–Ω–µ–¥–∂–µ—Ä', 'supervisor']).first()
            if manager_group:
                recipients.extend(manager_group.user_set.filter(is_active=True))
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        recipients = list(set(recipients))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ NotificationService)
        notification_response = NotificationService.send_status_change_notification(
            inspection_id=None,  # SLA —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            old_status='active',
            new_status=f'sla_{warning_type}',
            user=process.current_assignee or process.initiator
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        WorkflowTaskLog.log_task_action(
            process=process,
            task_name="SLA Warning",
            task_id="sla_warning",
            action="created",
            performer=process.current_assignee or process.initiator,
            comment=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {urgency} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ SLA",
            metadata={
                'warning_type': warning_type,
                'recipients_count': len(recipients),
                'sla_status': process.get_sla_status(),
                'time_remaining': str(process.get_time_remaining())
            }
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SLA –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id}")
        
        return {
            'success': True,
            'process_id': process_id,
            'warning_type': warning_type,
            'recipients_count': len(recipients)
        }
        
    except MaterialInspectionProcess.DoesNotExist:
        logger.error(f"–ü—Ä–æ—Ü–µ—Å—Å {process_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        return {'success': False, 'error': 'Process not found'}
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SLA –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id}: {exc}")
        self.retry(countdown=60, exc=exc)


@shared_task(bind=True, max_retries=3)
def notify_managers_about_escalation(self, process_id):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    try:
        process = MaterialInspectionProcess.objects.get(id=process_id)
        material = process.material_receipt.material
        
        message = (
            f"üö® –≠–°–ö–ê–õ–ê–¶–ò–Ø –ü–†–û–¶–ï–°–°–ê\n"
            f"üìã –ü—Ä–æ—Ü–µ—Å—Å: #{process.id}\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material.material_grade}\n"
            f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {material.supplier}\n"
            f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {process.get_priority_display()}\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {process.current_assignee.username if process.current_assignee else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {timezone.now() - process.sla_deadline if process.sla_deadline else 'N/A'}\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {process.progress_percentage}%\n"
            f"üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        from django.contrib.auth.models import Group
        
        managers = User.objects.filter(
            is_active=True,
            groups__name__in=['manager', '–º–µ–Ω–µ–¥–∂–µ—Ä', 'supervisor', 'admin']
        ).distinct()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = User.objects.filter(is_active=True, is_staff=True)
        
        recipients = list(set(list(managers) + list(admins)))
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        WorkflowTaskLog.log_task_action(
            process=process,
            task_name="Manager Escalation Notification",
            task_id="manager_notification",
            action="created",
            performer=process.current_assignee or process.initiator,
            comment=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º",
            metadata={
                'escalation_reason': 'SLA overdue',
                'recipients_count': len(recipients),
                'manager_usernames': [u.username for u in recipients]
            }
        )
        
        logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id}")
        
        return {
            'success': True,
            'process_id': process_id,
            'recipients_count': len(recipients)
        }
        
    except MaterialInspectionProcess.DoesNotExist:
        logger.error(f"–ü—Ä–æ—Ü–µ—Å—Å {process_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        return {'success': False, 'error': 'Process not found'}
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id}: {exc}")
        self.retry(countdown=60, exc=exc)


@shared_task(bind=True)
def cleanup_old_sla_violations(self):
    """
    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π SLA (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å
    """
    try:
        cutoff_date = timezone.now() - timedelta(days=30)
        
        old_violations = WorkflowSLAViolation.objects.filter(
            status='resolved',
            resolved_at__lt=cutoff_date
        )
        
        count = old_violations.count()
        old_violations.delete()
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π SLA")
        
        return {'success': True, 'deleted_count': count}
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π SLA: {exc}")
        return {'success': False, 'error': str(exc)}


@shared_task(bind=True)
def generate_sla_report(self):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ SLA
    """
    try:
        now = timezone.now()
        yesterday = now - timedelta(days=1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
        processes_completed = MaterialInspectionProcess.objects.filter(
            completed_at__date=yesterday.date(),
            status=MaterialInspectionProcess.STATUS.COMPLETED
        )
        
        processes_overdue = MaterialInspectionProcess.objects.filter(
            sla_deadline__lt=now,
            status=MaterialInspectionProcess.STATUS.ACTIVE
        )
        
        violations_created = WorkflowSLAViolation.objects.filter(
            detected_at__date=yesterday.date()
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        priority_stats = {}
        for priority, _ in MaterialInspectionProcess.PRIORITY_CHOICES.choices:
            priority_stats[priority] = {
                'completed': processes_completed.filter(priority=priority).count(),
                'overdue': processes_overdue.filter(priority=priority).count(),
            }
        
        report_data = {
            'date': yesterday.date().isoformat(),
            'completed_processes': processes_completed.count(),
            'overdue_processes': processes_overdue.count(),
            'violations_created': violations_created.count(),
            'priority_breakdown': priority_stats,
            'average_completion_time': None,  # TODO: –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        completed_durations = []
        for process in processes_completed:
            if process.started_at and process.completed_at:
                duration = process.completed_at - process.started_at
                completed_durations.append(duration.total_seconds())
        
        if completed_durations:
            avg_seconds = sum(completed_durations) / len(completed_durations)
            report_data['average_completion_time'] = str(timedelta(seconds=avg_seconds))
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω SLA –æ—Ç—á–µ—Ç –∑–∞ {yesterday.date()}")
        
        return {
            'success': True,
            'report_date': yesterday.date().isoformat(),
            'report_data': report_data
        }
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SLA –æ—Ç—á–µ—Ç–∞: {exc}")
        return {'success': False, 'error': str(exc)}


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è Celery Beat
# –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
CELERY_BEAT_SCHEDULE = {
    'monitor-sla-violations': {
        'task': 'apps.workflow.tasks.monitor_sla_violations',
        'schedule': 900.0,  # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    },
    'cleanup-old-sla-violations': {
        'task': 'apps.workflow.tasks.cleanup_old_sla_violations',
        'schedule': 86400.0,  # –†–∞–∑ –≤ –¥–µ–Ω—å
    },
    'generate-sla-report': {
        'task': 'apps.workflow.tasks.generate_sla_report',
        'schedule': 86400.0,  # –†–∞–∑ –≤ –¥–µ–Ω—å –≤ 01:00
        'options': {'eta': timezone.now().replace(hour=1, minute=0, second=0, microsecond=0)}
    },
}