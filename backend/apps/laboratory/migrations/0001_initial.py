# Generated by Django 5.0.1 on 2025-07-28 20:02

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("warehouse", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LabTestRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "test_type",
                    models.CharField(
                        choices=[
                            ("chemical_analysis", "Химический анализ"),
                            ("mechanical_properties", "Механические свойства"),
                            ("ultrasonic", "Ультразвуковой контроль"),
                            ("hardness", "Измерение твердости"),
                            ("metallographic", "Металлографический анализ"),
                            ("corrosion_resistance", "Коррозионная стойкость"),
                            ("fatigue_test", "Испытание на усталость"),
                            ("impact_test", "Испытание на ударную вязкость"),
                        ],
                        max_length=50,
                        verbose_name="Тип испытания",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Низкий"),
                            ("normal", "Обычный"),
                            ("high", "Высокий"),
                            ("urgent", "Срочный"),
                        ],
                        default="normal",
                        max_length=20,
                        verbose_name="Приоритет",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Ожидает"),
                            ("assigned", "Назначено"),
                            ("in_progress", "Выполняется"),
                            ("completed", "Завершено"),
                            ("cancelled", "Отменено"),
                            ("on_hold", "Приостановлено"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "internal_testing",
                    models.BooleanField(
                        default=True,
                        help_text="Выполняется в собственной лаборатории",
                        verbose_name="Внутреннее испытание",
                    ),
                ),
                (
                    "external_lab",
                    models.CharField(
                        blank=True,
                        help_text="Указать если internal_testing = False",
                        max_length=200,
                        verbose_name="Внешняя лаборатория",
                    ),
                ),
                (
                    "request_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Дата запроса"
                    ),
                ),
                (
                    "required_completion_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Требуемая дата завершения"
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Фактическая дата начала"
                    ),
                ),
                (
                    "actual_completion_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Фактическая дата завершения",
                    ),
                ),
                (
                    "test_requirements",
                    models.TextField(
                        help_text="Подробное описание того, что нужно проверить",
                        verbose_name="Требования к испытанию",
                    ),
                ),
                (
                    "sample_preparation_notes",
                    models.TextField(
                        blank=True, verbose_name="Примечания по подготовке образцов"
                    ),
                ),
                (
                    "estimated_duration_hours",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Оценочная продолжительность (часы)",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_lab_tests",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Исполнитель",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Создано пользователем",
                    ),
                ),
                (
                    "material_receipt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lab_test_requests",
                        to="warehouse.materialreceipt",
                        verbose_name="Поступление материала",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="lab_requests",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Заказчик",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Обновлено пользователем",
                    ),
                ),
            ],
            options={
                "verbose_name": "Запрос на испытание",
                "verbose_name_plural": "Запросы на испытания",
                "ordering": ["-request_date"],
            },
        ),
        migrations.CreateModel(
            name="TestEquipment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, verbose_name="Название оборудования"
                    ),
                ),
                (
                    "equipment_type",
                    models.CharField(
                        choices=[
                            ("spectrometer", "Спектрометр"),
                            ("tensile_machine", "Разрывная машина"),
                            ("hardness_tester", "Твердомер"),
                            ("ultrasonic_detector", "УЗ дефектоскоп"),
                            ("microscope", "Микроскоп"),
                            ("furnace", "Печь"),
                            ("scales", "Весы"),
                            ("other", "Прочее"),
                        ],
                        default="other",
                        max_length=50,
                        verbose_name="Тип оборудования",
                    ),
                ),
                ("model", models.CharField(max_length=100, verbose_name="Модель")),
                (
                    "serial_number",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Серийный номер"
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Производитель"
                    ),
                ),
                ("calibration_date", models.DateField(verbose_name="Дата калибровки")),
                (
                    "next_calibration_date",
                    models.DateField(verbose_name="Дата следующей калибровки"),
                ),
                (
                    "calibration_interval_months",
                    models.PositiveIntegerField(
                        default=12, verbose_name="Интервал калибровки (месяцев)"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Активно"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Расположение"
                    ),
                ),
                (
                    "accuracy_class",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Класс точности"
                    ),
                ),
                (
                    "measurement_range",
                    models.TextField(blank=True, verbose_name="Диапазон измерений"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Примечания")),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Создано пользователем",
                    ),
                ),
                (
                    "responsible_person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="responsible_equipment",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Ответственное лицо",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Обновлено пользователем",
                    ),
                ),
            ],
            options={
                "verbose_name": "Испытательное оборудование",
                "verbose_name_plural": "Испытательное оборудование",
                "ordering": ["name", "model"],
            },
        ),
        migrations.CreateModel(
            name="LabTestResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "test_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Дата испытания"
                    ),
                ),
                (
                    "results",
                    models.JSONField(
                        default=dict,
                        help_text="Данные испытания в формате JSON",
                        verbose_name="Результаты испытания",
                    ),
                ),
                (
                    "conclusion",
                    models.CharField(
                        choices=[
                            ("passed", "Соответствует"),
                            ("failed", "Не соответствует"),
                            ("conditional", "Условно соответствует"),
                            ("retest_required", "Требуется переиспытание"),
                        ],
                        max_length=20,
                        verbose_name="Заключение",
                    ),
                ),
                (
                    "certificate_number",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        verbose_name="Номер протокола/сертификата",
                    ),
                ),
                (
                    "test_conditions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Температура, влажность и другие параметры",
                        verbose_name="Условия испытания",
                    ),
                ),
                (
                    "sample_description",
                    models.TextField(verbose_name="Описание образца"),
                ),
                (
                    "test_method",
                    models.CharField(
                        help_text="ГОСТ, ТУ или другой стандарт",
                        max_length=200,
                        verbose_name="Метод испытания",
                    ),
                ),
                ("comments", models.TextField(blank=True, verbose_name="Комментарии")),
                (
                    "file_attachments",
                    models.TextField(
                        blank=True,
                        help_text="Пути к файлам с графиками, фотографиями и т.д.",
                        verbose_name="Приложенные файлы",
                    ),
                ),
                (
                    "approval_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Дата утверждения"
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_tests",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Утвердил",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Создано пользователем",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="performed_tests",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Исполнитель",
                    ),
                ),
                (
                    "test_request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_result",
                        to="laboratory.labtestrequest",
                        verbose_name="Запрос на испытание",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Обновлено пользователем",
                    ),
                ),
                (
                    "equipment_used",
                    models.ManyToManyField(
                        related_name="test_results",
                        to="laboratory.testequipment",
                        verbose_name="Использованное оборудование",
                    ),
                ),
            ],
            options={
                "verbose_name": "Результат испытания",
                "verbose_name_plural": "Результаты испытаний",
                "ordering": ["-test_date"],
            },
        ),
        migrations.CreateModel(
            name="TestStandard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата создания"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Название стандарта"),
                ),
                (
                    "standard_number",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Номер стандарта"
                    ),
                ),
                (
                    "test_type",
                    models.CharField(
                        choices=[
                            ("chemical_analysis", "Химический анализ"),
                            ("mechanical_properties", "Механические свойства"),
                            ("ultrasonic", "Ультразвуковой контроль"),
                            ("hardness", "Измерение твердости"),
                            ("metallographic", "Металлографический анализ"),
                            ("corrosion_resistance", "Коррозионная стойкость"),
                            ("fatigue_test", "Испытание на усталость"),
                            ("impact_test", "Испытание на ударную вязкость"),
                        ],
                        max_length=50,
                        verbose_name="Тип испытания",
                    ),
                ),
                (
                    "material_grades",
                    models.TextField(
                        blank=True,
                        help_text="Перечислить через запятую",
                        verbose_name="Применимые марки материалов",
                    ),
                ),
                (
                    "requirements",
                    models.JSONField(
                        default=dict,
                        help_text="Минимальные и максимальные значения",
                        verbose_name="Требования стандарта",
                    ),
                ),
                ("test_method", models.TextField(verbose_name="Методика испытания")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Активен"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Создано пользователем",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Обновлено пользователем",
                    ),
                ),
            ],
            options={
                "verbose_name": "Стандарт испытания",
                "verbose_name_plural": "Стандарты испытаний",
                "ordering": ["standard_number"],
            },
        ),
        migrations.AddIndex(
            model_name="labtestrequest",
            index=models.Index(fields=["status"], name="laboratory__status_a57faa_idx"),
        ),
        migrations.AddIndex(
            model_name="labtestrequest",
            index=models.Index(
                fields=["test_type"], name="laboratory__test_ty_5e1481_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="labtestrequest",
            index=models.Index(
                fields=["priority"], name="laboratory__priorit_0e2f93_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="labtestrequest",
            index=models.Index(
                fields=["request_date"], name="laboratory__request_bd39b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="labtestrequest",
            index=models.Index(
                fields=["required_completion_date"],
                name="laboratory__require_780303_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="testequipment",
            index=models.Index(
                fields=["equipment_type"], name="laboratory__equipme_fbac1f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testequipment",
            index=models.Index(
                fields=["is_active"], name="laboratory__is_acti_bd99e4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testequipment",
            index=models.Index(
                fields=["next_calibration_date"], name="laboratory__next_ca_a92722_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testequipment",
            index=models.Index(
                fields=["calibration_date"], name="laboratory__calibra_8f3050_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="labtestresult",
            index=models.Index(
                fields=["conclusion"], name="laboratory__conclus_c71b9f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="labtestresult",
            index=models.Index(
                fields=["test_date"], name="laboratory__test_da_1346c0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="labtestresult",
            index=models.Index(
                fields=["certificate_number"], name="laboratory__certifi_9c1d1c_idx"
            ),
        ),
    ]
