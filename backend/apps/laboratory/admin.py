from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.db import models
from django.forms import Textarea
from django.utils import timezone
from .models import TestEquipment, LabTestRequest, LabTestResult, TestStandard


@admin.register(TestEquipment)
class TestEquipmentAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    
    list_display = [
        'name',
        'equipment_type',
        'model',
        'serial_number',
        'calibration_status_display',
        'days_until_calibration_display',
        'is_active',
        'responsible_person'
    ]
    
    list_filter = [
        'equipment_type',
        'is_active',
        'calibration_date',
        'next_calibration_date',
        'responsible_person'
    ]
    
    search_fields = [
        'name',
        'model',
        'serial_number',
        'manufacturer'
    ]
    
    readonly_fields = [
        'calibration_status_display_detailed',
        'days_until_calibration_display',
        'created_at',
        'updated_at',
        'created_by',
        'updated_by'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'name',
                'equipment_type',
                'model',
                'serial_number',
                'manufacturer'
            )
        }),
        ('–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞', {
            'fields': (
                'calibration_date',
                'next_calibration_date',
                'calibration_interval_months',
                'calibration_status_display_detailed'
            )
        }),
        ('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', {
            'fields': (
                'accuracy_class',
                'measurement_range',
                'location'
            )
        }),
        ('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', {
            'fields': (
                'is_active',
                'responsible_person',
                'notes'
            )
        }),
        ('–ê—É–¥–∏—Ç', {
            'fields': (
                'created_at',
                'created_by',
                'updated_at',
                'updated_by'
            ),
            'classes': ('collapse',)
        })
    )
    
    ordering = ['name']
    actions = ['mark_calibration_needed', 'deactivate_equipment']
    
    def calibration_status_display(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        status = obj.get_calibration_status()
        colors = {
            'overdue': 'red',
            'warning': 'orange',
            'valid': 'green'
        }
        color = colors.get(status, 'gray')
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color,
            obj.get_calibration_status_display()
        )
    calibration_status_display.short_description = '–°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏'
    
    def days_until_calibration_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–π –¥–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        days = obj.days_until_calibration()
        
        if days < 0:
            return format_html(
                '<span style="color: red; font-weight: bold;">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {} –¥–Ω.</span>',
                abs(days)
            )
        elif days <= 30:
            return format_html(
                '<span style="color: orange; font-weight: bold;">{} –¥–Ω.</span>',
                days
            )
        else:
            return format_html('<span style="color: green;">{} –¥–Ω.</span>', days)
    days_until_calibration_display.short_description = '–î–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏'
    
    def calibration_status_display_detailed(self, obj):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ"""
        status = obj.get_calibration_status()
        days = obj.days_until_calibration()
        
        if status == 'overdue':
            message = f'‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–ê –Ω–∞ {abs(days)} –¥–Ω–µ–π!'
            color = 'red'
        elif status == 'warning':
            message = f'üîî –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è, –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π'
            color = 'orange'
        else:
            message = f'‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π'
            color = 'green'
        
        return format_html(
            '<div style="color: {}; font-weight: bold; font-size: 14px;">{}</div>',
            color, message
        )
    calibration_status_display_detailed.short_description = '–°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏'
    
    def mark_calibration_needed(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ: –ø–æ–º–µ—Ç–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        for equipment in queryset:
            equipment.is_active = False
            equipment.save()
        
        self.message_user(request, f'–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {queryset.count()}')
    mark_calibration_needed.short_description = '–ü–æ–º–µ—Ç–∏—Ç—å –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏'
    
    def deactivate_equipment(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {updated}')
    deactivate_equipment.short_description = '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'

    def save_model(self, request, obj, form, change):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not change:
            obj.created_by = request.user
        obj.updated_by = request.user
        super().save_model(request, obj, form, change)


@admin.register(LabTestRequest)
class LabTestRequestAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"""
    
    list_display = [
        'test_info',
        'material_info',
        'requested_by',
        'priority_display',
        'status_display',
        'internal_testing_display',
        'request_date',
        'required_completion_date',
        'is_overdue_display'
    ]
    
    list_filter = [
        'test_type',
        'priority',
        'status',
        'internal_testing',
        'request_date',
        'required_completion_date'
    ]
    
    search_fields = [
        'material_receipt__material__material_grade',
        'material_receipt__material__supplier',
        'material_receipt__material__certificate_number',
        'test_requirements'
    ]
    
    readonly_fields = [
        'duration_display',
        'created_at',
        'updated_at',
        'created_by',
        'updated_by'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'material_receipt',
                'test_type',
                'requested_by',
                'assigned_to'
            )
        }),
        ('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞', {
            'fields': (
                'priority',
                'status',
                'internal_testing',
                'external_lab'
            )
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏', {
            'fields': (
                'request_date',
                'required_completion_date',
                'actual_start_date',
                'actual_completion_date',
                'estimated_duration_hours',
                'duration_display'
            )
        }),
        ('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è', {
            'fields': (
                'test_requirements',
                'sample_preparation_notes'
            )
        }),
        ('–ê—É–¥–∏—Ç', {
            'fields': (
                'created_at',
                'created_by',
                'updated_at',
                'updated_by'
            ),
            'classes': ('collapse',)
        })
    )
    
    ordering = ['-request_date']
    date_hierarchy = 'request_date'
    actions = ['assign_to_me', 'mark_in_progress', 'mark_completed']
    
    def test_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø—ã—Ç–∞–Ω–∏–∏"""
        return f"{obj.get_test_type_display()}"
    test_info.short_description = '–¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è'
    
    def material_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ"""
        material = obj.material_receipt.material
        return format_html(
            '<strong>{}</strong><br/><small>{}</small>',
            material.material_grade,
            material.supplier
        )
    material_info.short_description = '–ú–∞—Ç–µ—Ä–∏–∞–ª'
    
    def priority_display(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"""
        colors = {
            'low': 'gray',
            'normal': 'blue',
            'high': 'orange',
            'urgent': 'red'
        }
        color = colors.get(obj.priority, 'black')
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color,
            obj.get_priority_display()
        )
    priority_display.short_description = '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'
    
    def status_display(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—É—Å"""
        colors = {
            'pending': 'orange',
            'assigned': 'blue',
            'in_progress': 'purple',
            'completed': 'green',
            'cancelled': 'red',
            'on_hold': 'gray'
        }
        color = colors.get(obj.status, 'black')
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color,
            obj.get_status_display()
        )
    status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def internal_testing_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"""
        if obj.internal_testing:
            return format_html('<span style="color: green;">‚úì –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ</span>')
        else:
            return format_html(
                '<span style="color: orange;">‚ö† –í–Ω–µ—à–Ω–µ–µ<br/><small>{}</small></span>',
                obj.external_lab or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            )
    internal_testing_display.short_description = '–¢–∏–ø'
    
    def is_overdue_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏"""
        if obj.is_overdue():
            return format_html('<span style="color: red; font-weight: bold;">‚ö† –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</span>')
        elif obj.required_completion_date:
            days_left = (obj.required_completion_date - timezone.now().date()).days
            if days_left <= 3:
                return format_html('<span style="color: orange;">‚è∞ {} –¥–Ω.</span>', days_left)
        return format_html('<span style="color: green;">‚úì</span>')
    is_overdue_display.short_description = '–°—Ä–æ–∫'
    
    def duration_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        duration = obj.get_duration()
        if duration:
            return f"{duration:.1f} —á–∞—Å–æ–≤"
        elif obj.estimated_duration_hours:
            return f"–û—Ü–µ–Ω–∫–∞: {obj.estimated_duration_hours} —á–∞—Å–æ–≤"
        return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    duration_display.short_description = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    
    def assign_to_me(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ: –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ"""
        updated = queryset.filter(status='pending').update(
            assigned_to=request.user,
            status='assigned'
        )
        self.message_user(request, f'–ù–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {updated}')
    assign_to_me.short_description = '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ'
    
    def mark_in_progress(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ: –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        updated = 0
        for test_request in queryset:
            if test_request.status in ['pending', 'assigned']:
                test_request.status = 'in_progress'
                test_request.actual_start_date = timezone.now()
                test_request.save()
                updated += 1
        
        self.message_user(request, f'–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {updated}')
    mark_in_progress.short_description = '–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'
    
    def mark_completed(self, request, queryset):
        """–î–µ–π—Å—Ç–≤–∏–µ: –∑–∞–≤–µ—Ä—à–∏—Ç—å"""
        updated = queryset.filter(status='in_progress').update(
            status='completed',
            actual_completion_date=timezone.now()
        )
        self.message_user(request, f'–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {updated}')
    mark_completed.short_description = '–ó–∞–≤–µ—Ä—à–∏—Ç—å'

    def save_model(self, request, obj, form, change):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not change:
            obj.created_by = request.user
        obj.updated_by = request.user
        super().save_model(request, obj, form, change)


@admin.register(LabTestResult)
class LabTestResultAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–π"""
    
    list_display = [
        'certificate_number',
        'test_info',
        'performed_by',
        'test_date',
        'conclusion_display',
        'approval_status',
        'equipment_list'
    ]
    
    list_filter = [
        'conclusion',
        'test_date',
        'performed_by',
        'approved_by',
        'test_request__test_type'
    ]
    
    search_fields = [
        'certificate_number',
        'test_request__material_receipt__material__material_grade',
        'test_method',
        'comments'
    ]
    
    readonly_fields = [
        'formatted_results_display',
        'created_at',
        'updated_at',
        'created_by',
        'updated_by'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'test_request',
                'certificate_number',
                'performed_by',
                'test_date'
            )
        }),
        ('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', {
            'fields': (
                'conclusion',
                'test_method',
                'sample_description',
                'results',
                'test_conditions',
                'formatted_results_display'
            )
        }),
        ('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —É—Å–ª–æ–≤–∏—è', {
            'fields': (
                'equipment_used',
            )
        }),
        ('–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', {
            'fields': (
                'approved_by',
                'approval_date',
                'comments'
            )
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': (
                'file_attachments',
            ),
            'classes': ('collapse',)
        }),
        ('–ê—É–¥–∏—Ç', {
            'fields': (
                'created_at',
                'created_by',
                'updated_at',
                'updated_by'
            ),
            'classes': ('collapse',)
        })
    )
    
    filter_horizontal = ['equipment_used']
    ordering = ['-test_date']
    
    def test_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø—ã—Ç–∞–Ω–∏–∏"""
        material = obj.test_request.material_receipt.material
        return format_html(
            '<strong>{}</strong><br/><small>{}</small>',
            obj.test_request.get_test_type_display(),
            material.material_grade
        )
    test_info.short_description = '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ'
    
    def conclusion_display(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"""
        colors = {
            'passed': 'green',
            'failed': 'red',
            'conditional': 'orange',
            'retest_required': 'blue'
        }
        color = colors.get(obj.conclusion, 'black')
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color,
            obj.get_conclusion_display()
        )
    conclusion_display.short_description = '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ'
    
    def approval_status(self, obj):
        """–°—Ç–∞—Ç—É—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if obj.is_approved():
            return format_html(
                '<span style="color: green;">‚úì –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ<br/><small>{}</small></span>',
                obj.approved_by.get_full_name() or obj.approved_by.username
            )
        else:
            return format_html('<span style="color: orange;">‚è≥ –û–∂–∏–¥–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</span>')
    approval_status.short_description = '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'
    
    def equipment_list(self, obj):
        """–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        equipment = obj.equipment_used.all()
        if equipment:
            items = []
            for eq in equipment[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                status = eq.get_calibration_status()
                if status == 'valid':
                    icon = '‚úÖ'
                elif status == 'warning':
                    icon = 'üü°'
                else:
                    icon = 'üî¥'
                items.append(f'{icon} {eq.name}')
            
            result = '<br/>'.join(items)
            if len(equipment) > 3:
                result += f'<br/>... –∏ –µ—â–µ {len(equipment) - 3}'
            return format_html(result)
        return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    equipment_list.short_description = '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
    
    def formatted_results_display(self, obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        formatted = obj.format_results_for_certificate()
        if not formatted:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        html_parts = []
        for section, data in formatted.items():
            html_parts.append(f'<h4>{section}:</h4>')
            if isinstance(data, dict):
                for key, value in data.items():
                    html_parts.append(f'<div><strong>{key}:</strong> {value}</div>')
            else:
                html_parts.append(f'<div>{data}</div>')
        
        return format_html('<div style="max-height: 200px; overflow-y: auto;">{}</div>', ''.join(html_parts))
    formatted_results_display.short_description = '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'

    def save_model(self, request, obj, form, change):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not change:
            obj.created_by = request.user
        obj.updated_by = request.user
        super().save_model(request, obj, form, change)


@admin.register(TestStandard)
class TestStandardAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–π"""
    
    list_display = [
        'standard_number',
        'name',
        'test_type',
        'applicable_grades_display',
        'is_active'
    ]
    
    list_filter = [
        'test_type',
        'is_active'
    ]
    
    search_fields = [
        'name',
        'standard_number',
        'material_grades'
    ]
    
    readonly_fields = [
        'created_at',
        'updated_at',
        'created_by',
        'updated_by'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'standard_number',
                'name',
                'test_type',
                'is_active'
            )
        }),
        ('–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å', {
            'fields': (
                'material_grades',
            )
        }),
        ('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç–æ–¥–∏–∫–∞', {
            'fields': (
                'requirements',
                'test_method'
            )
        }),
        ('–ê—É–¥–∏—Ç', {
            'fields': (
                'created_at',
                'created_by',
                'updated_at',
                'updated_by'
            ),
            'classes': ('collapse',)
        })
    )
    
    def applicable_grades_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –º–∞—Ä–æ–∫"""
        grades = obj.get_applicable_grades()
        if not grades:
            return format_html('<span style="color: blue; font-style: italic;">–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π</span>')
        
        if len(grades) <= 3:
            return ', '.join(grades)
        else:
            return f"{', '.join(grades[:3])} ... (+{len(grades) - 3})"
    applicable_grades_display.short_description = '–ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –º–∞—Ä–∫–∏'

    def save_model(self, request, obj, form, change):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not change:
            obj.created_by = request.user
        obj.updated_by = request.user
        super().save_model(request, obj, form, change) 