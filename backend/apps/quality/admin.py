from django.contrib import admin
from django.utils.html import format_html
from .models import QCInspection, QCInspectionResult


@admin.register(QCInspection)
class QCInspectionAdmin(admin.ModelAdmin):
    list_display = ['material_info', 'inspector', 'inspection_date', 'status']

    def material_info(self, obj):
        material = obj.material_receipt.material
        return format_html(
            '<strong>{}</strong><br/><small>{} - {}</small>',
            material.material_grade,
            material.supplier,
            material.certificate_number
        )
    material_info.short_description = '–ú–∞—Ç–µ—Ä–∏–∞–ª'


@admin.register(QCInspectionResult)
class QCInspectionResultAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏"""
    
    list_display = [
        'inspection_info',
        'checklist_item_short',
        'result_colored',
        'is_critical_display',
        'measured_value',
        'has_notes'
    ]
    
    list_filter = [
        'result',
        'checklist_item__is_critical',
        'inspection__status',
        'created_at'
    ]
    
    search_fields = [
        'inspection__material_receipt__material__material_grade',
        'checklist_item__description',
        'notes',
        'measured_value'
    ]
    
    readonly_fields = [
        'created_at',
        'updated_at',
        'created_by',
        'updated_by'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'inspection',
                'checklist_item',
                'result'
            )
        }),
        ('–î–µ—Ç–∞–ª–∏', {
            'fields': (
                'measured_value',
                'notes',
                'inspector_signature'
            )
        }),
        ('–ê—É–¥–∏—Ç', {
            'fields': (
                'created_at',
                'created_by',
                'updated_at',
                'updated_by'
            ),
            'classes': ('collapse',)
        })
    )
    
    ordering = ['inspection', 'checklist_item__order']
    
    def inspection_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å–ø–µ–∫—Ü–∏–∏"""
        material = obj.inspection.material_receipt.material
        return format_html(
            '<strong>{}</strong><br/><small>{}</small>',
            material.material_grade,
            obj.inspection.get_status_display()
        )
    inspection_info.short_description = '–ò–Ω—Å–ø–µ–∫—Ü–∏—è'
    
    def checklist_item_short(self, obj):
        """–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞"""
        critical_mark = " üî¥" if obj.checklist_item.is_critical else ""
        return f"{obj.checklist_item.order}. {obj.checklist_item.description[:40]}...{critical_mark}"
    checklist_item_short.short_description = '–ü—É–Ω–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
    
    def result_colored(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        if not obj.result:
            return format_html('<span style="color: orange;">–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ</span>')
        
        colors = {
            'passed': 'green',
            'failed': 'red',
            'na': 'gray'
        }
        color = colors.get(obj.result, 'black')
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color,
            obj.get_result_display()
        )
    result_colored.short_description = '–†–µ–∑—É–ª—å—Ç–∞—Ç'
    
    def is_critical_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—É–Ω–∫—Ç–∞"""
        if obj.checklist_item.is_critical:
            return format_html('<span style="color: red;">üî¥</span>')
        return format_html('<span style="color: gray;">‚óã</span>')
    is_critical_display.short_description = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
    
    def has_notes(self, obj):
        """–ù–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π"""
        if obj.notes:
            return format_html('<span style="color: blue;" title="{}">üìù</span>', obj.notes[:100])
        return format_html('<span style="color: gray;">‚Äî</span>')
    has_notes.short_description = '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'

    def save_model(self, request, obj, form, change):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not change:
            obj.created_by = request.user
        obj.updated_by = request.user
        super().save_model(request, obj, form, change) 