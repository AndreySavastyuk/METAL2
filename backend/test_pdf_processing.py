"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
"""
import os
import sys
import django
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from django.utils import timezone
from apps.warehouse.models import Material, Certificate
from apps.certificates.models import CertificateSearchIndex, CertificatePreview
from apps.certificates.services import certificate_processor
from apps.certificates.tasks import process_uploaded_certificate


def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = User.objects.get_or_create(
        username='test_pdf_user',
        defaults={
            'first_name': 'PDF',
            'last_name': '–¢–µ—Å—Ç–µ—Ä',
            'email': 'pdf@test.com'
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    material, created = Material.objects.get_or_create(
        material_grade='40X',
        supplier='–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ PDF',
        certificate_number='PDF-CERT-001',
        heat_number='PDF-HEAT-001',
        defaults={
            'size': '‚åÄ50',
            'quantity': 500,
            'unit': 'kg',
            'order_number': 'PDF-ORDER-001',
            'created_by': user,
            'updated_by': user
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {material}")
    
    return user, material


def test_text_extraction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
    print("\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å PDF —Ñ–∞–π–ª–∞–º–∏
    certificates_with_files = Certificate.objects.filter(
        pdf_file__isnull=False
    ).exclude(pdf_file='')[:3]
    
    if not certificates_with_files:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å PDF —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É Django")
        return
    
    for certificate in certificates_with_files:
        print(f"\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {certificate}")
        print(f"   –§–∞–π–ª: {certificate.pdf_file.name}")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = certificate_processor.extract_text_from_pdf(certificate.pdf_file.path)
            
            if text:
                print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                preview = text[:200] + "..." if len(text) > 200 else text
                print(f"üìñ –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞:")
                print(f"   {preview}")
                
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                parsed_data = certificate_processor.parse_certificate_data(text)
                print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                
                if parsed_data.get('grade'):
                    print(f"   ‚Ä¢ –ú–∞—Ä–∫–∞: {parsed_data['grade']}")
                if parsed_data.get('heat_number'):
                    print(f"   ‚Ä¢ –ü–ª–∞–≤–∫–∞: {parsed_data['heat_number']}")
                if parsed_data.get('supplier'):
                    print(f"   ‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {parsed_data['supplier']}")
                if parsed_data.get('chemical_composition'):
                    elements = len(parsed_data['chemical_composition'])
                    print(f"   ‚Ä¢ –•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤: {elements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def test_preview_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é"""
    print("\nüñºÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–ï–í–¨–Æ")
    print("=" * 50)
    
    certificates_with_files = Certificate.objects.filter(
        pdf_file__isnull=False
    ).exclude(pdf_file='')[:2]
    
    if not certificates_with_files:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å PDF —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    for certificate in certificates_with_files:
        print(f"\nüìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è: {certificate}")
        
        try:
            preview_url = certificate_processor.generate_certificate_preview(certificate.pdf_file)
            
            if preview_url:
                print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {preview_url}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {e}")


def test_search_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –í –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê–•")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    processed_count = CertificateSearchIndex.objects.filter(
        processing_status='completed'
    ).count()
    
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {processed_count}")
    
    if processed_count == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π: python manage.py reprocess_all_certificates")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        '40X',
        '—Å—Ç–∞–ª—å',
        '–ø–ª–∞–≤–∫–∞',
        '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
        '–ø–æ—Å—Ç–∞–≤—â–∏–∫'
    ]
    
    for query in test_queries:
        print(f"\nüîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
        
        try:
            results = certificate_processor.search_in_certificates(query, limit=5)
            
            if results:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                
                for i, result in enumerate(results[:3], 1):
                    print(f"   {i}. –ú–∞—Ç–µ—Ä–∏–∞–ª: {result.get('grade', 'N/A')}")
                    print(f"      –ü–ª–∞–≤–∫–∞: {result.get('heat_number', 'N/A')}")
                    print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('match_score', 0):.1f}")
                    print(f"      –ü–æ–ª—è: {', '.join(result.get('matched_fields', []))}")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")


def test_async_processing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\n‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–°–ò–ù–•–†–û–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    certificates = Certificate.objects.filter(
        pdf_file__isnull=False
    ).exclude(pdf_file='')[:1]
    
    if not certificates:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    certificate = certificates[0]
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {certificate}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        task = process_uploaded_certificate.delay(certificate.id)
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å ID: {task.id}")
        print("‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Celery worker")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É –∏–ª–∏ API")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í")
    print("=" * 50)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_certs = Certificate.objects.count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞
    text_stats = CertificateSearchIndex.objects.values('processing_status').annotate(
        count=Count('id')
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–≤—å—é
    preview_stats = CertificatePreview.objects.values('generation_status').annotate(
        count=Count('id')
    )
    
    print(f"üìÑ –í—Å–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {total_certs}")
    
    print(f"\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞:")
    for stat in text_stats:
        status_name = {
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            'failed': '–û—à–∏–±–∫–∏',
            'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
            'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è'
        }.get(stat['processing_status'], stat['processing_status'])
        print(f"   ‚Ä¢ {status_name}: {stat['count']}")
    
    print(f"\nüñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é:")
    for stat in preview_stats:
        status_name = {
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            'failed': '–û—à–∏–±–∫–∏',
            'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
            'generating': '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è'
        }.get(stat['generation_status'], stat['generation_status'])
        print(f"   ‚Ä¢ {status_name}: {stat['count']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if CertificateSearchIndex.objects.filter(processing_status='completed').exists():
        print(f"\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        
        with_grade = CertificateSearchIndex.objects.filter(
            processing_status='completed',
            grade__isnull=False
        ).exclude(grade='').count()
        
        with_heat = CertificateSearchIndex.objects.filter(
            processing_status='completed',
            heat_number__isnull=False
        ).exclude(heat_number='').count()
        
        with_supplier = CertificateSearchIndex.objects.filter(
            processing_status='completed',
            supplier__isnull=False
        ).exclude(supplier='').count()
        
        print(f"   ‚Ä¢ –° –º–∞—Ä–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {with_grade}")
        print(f"   ‚Ä¢ –° –Ω–æ–º–µ—Ä–æ–º –ø–ª–∞–≤–∫–∏: {with_heat}")
        print(f"   ‚Ä¢ –° –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º: {with_supplier}")


def print_available_commands():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    print("\nüõ†Ô∏è –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ë–†–ê–ë–û–¢–ö–û–ô")
    print("=" * 60)
    
    commands = [
        ("python manage.py reprocess_all_certificates", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"),
        ("python manage.py reprocess_all_certificates --force", "–ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"),
        ("python manage.py reprocess_all_certificates --ids 1,2,3", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"),
        ("python manage.py reprocess_all_certificates --text-only", "–¢–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"),
        ("python manage.py reprocess_all_certificates --preview-only", "–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é"),
        ("python manage.py reprocess_all_certificates --async", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"),
        ("python manage.py reprocess_all_certificates --stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        ("python manage.py reprocess_all_certificates --dry-run", "–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"),
    ]
    
    for command, description in commands:
        print(f"‚Ä¢ {command}")
        print(f"  {description}\n")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–ë–û–¢–ö–ò PDF –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    user, material = create_test_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    show_statistics()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    test_text_extraction()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é
    test_preview_generation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    test_search_functionality()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    test_async_processing()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    print_available_commands()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìä –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É Django")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py reprocess_all_certificates")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints:")
    print("   GET /api/certificates/processing/search/?q=40X")
    print("   GET /api/certificates/processing/statistics/")


if __name__ == '__main__':
    from django.db.models import Count
    main()