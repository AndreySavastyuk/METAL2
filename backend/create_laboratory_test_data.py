#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
"""
import os
import sys
import django
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from apps.warehouse.models import MaterialReceipt
from apps.laboratory.models import TestEquipment, LabTestRequest, LabTestResult, TestStandard


def create_laboratory_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"""
    
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ (–¶–ó–õ)...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    admin_user = User.objects.get(username='admin')
    
    # –°–æ–∑–¥–∞–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    lab_manager, created = User.objects.get_or_create(
        username='lab_manager',
        defaults={
            'email': 'lab_manager@metalqms.local',
            'first_name': '–ê–Ω–Ω–∞',
            'last_name': '–ó–∞–≤–µ–¥—É—é—â–∞—è'
        }
    )
    
    lab_technician, created = User.objects.get_or_create(
        username='lab_technician',
        defaults={
            'email': 'lab_tech@metalqms.local',
            'first_name': '–ò–≥–æ—Ä—å',
            'last_name': '–õ–∞–±–æ—Ä–∞–Ω—Ç'
        }
    )
    
    chemist, created = User.objects.get_or_create(
        username='chemist',
        defaults={
            'email': 'chemist@metalqms.local',
            'first_name': '–ï–ª–µ–Ω–∞',
            'last_name': '–•–∏–º–∏–∫'
        }
    )
    
    print(f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª: {lab_manager.username}, {lab_technician.username}, {chemist.username}")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    print("\nüî¨ –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
    
    equipment_data = [
        {
            'name': '–°–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä –ê–†–õ 3460',
            'equipment_type': 'spectrometer',
            'model': 'ARL 3460',
            'serial_number': 'SPR-2023-001',
            'manufacturer': 'Thermo Fisher Scientific',
            'calibration_date': datetime.now().date() - timedelta(days=30),
            'calibration_interval_months': 12,
            'location': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ö–∏–º–∞–Ω–∞–ª–∏–∑–∞',
            'responsible_person': chemist,
            'accuracy_class': '0.001%',
            'measurement_range': 'C: 0.008-6.67%, Si: 0.01-4.0%, Mn: 0.10-2.0%'
        },
        {
            'name': '–†–∞–∑—Ä—ã–≤–Ω–∞—è –º–∞—à–∏–Ω–∞ Instron 5982',
            'equipment_type': 'tensile_machine',
            'model': 'Instron 5982',
            'serial_number': 'TEN-2023-002',
            'manufacturer': 'Instron',
            'calibration_date': datetime.now().date() - timedelta(days=90),
            'calibration_interval_months': 6,
            'location': '–ó–∞–ª –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π',
            'responsible_person': lab_technician,
            'accuracy_class': '¬±0.5%',
            'measurement_range': '0-100 –∫–ù'
        },
        {
            'name': '–¢–≤–µ—Ä–¥–æ–º–µ—Ä Rockwell HR-430MS',
            'equipment_type': 'hardness_tester',
            'model': 'HR-430MS',
            'serial_number': 'HRD-2023-003',
            'manufacturer': 'Mitutoyo',
            'calibration_date': datetime.now().date() - timedelta(days=200),  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!
            'calibration_interval_months': 6,
            'location': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏',
            'responsible_person': lab_technician,
            'accuracy_class': '¬±1 HRC',
            'measurement_range': '20-70 HRC'
        },
        {
            'name': '–£–ó –¥–µ—Ñ–µ–∫—Ç–æ—Å–∫–æ–ø –£–î2-12',
            'equipment_type': 'ultrasonic_detector',
            'model': '–£–î2-12',
            'serial_number': 'USD-2023-004',
            'manufacturer': '–ö–†–û–ü–£–°',
            'calibration_date': datetime.now().date() - timedelta(days=10),
            'calibration_interval_months': 12,
            'location': '–£—á–∞—Å—Ç–æ–∫ –ù–ö',
            'responsible_person': lab_technician,
            'accuracy_class': '¬±2%',
            'measurement_range': '0.8-300 –º–º (—Å—Ç–∞–ª—å)'
        },
        {
            'name': '–ú–∏–∫—Ä–æ—Å–∫–æ–ø Olympus GX53',
            'equipment_type': 'microscope',
            'model': 'GX53',
            'serial_number': 'MIC-2023-005',
            'manufacturer': 'Olympus',
            'calibration_date': datetime.now().date() - timedelta(days=350),  # –°–∫–æ—Ä–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
            'calibration_interval_months': 12,
            'location': '–ú–µ—Ç–∞–ª–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            'responsible_person': chemist,
            'accuracy_class': '0.1 –º–∫–º',
            'measurement_range': '50x-1000x'
        }
    ]
    
    created_equipment = []
    for eq_data in equipment_data:
        equipment, created = TestEquipment.objects.get_or_create(
            serial_number=eq_data['serial_number'],
            defaults={
                **eq_data,
                'created_by': admin_user,
                'updated_by': admin_user
            }
        )
        created_equipment.append(equipment)
        
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment}")
            status = equipment.get_calibration_status()
            print(f"   –°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {equipment.get_calibration_status_display()}")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–π...")
    
    standards_data = [
        {
            'name': '–°—Ç–∞–ª—å —É–≥–ª–µ—Ä–æ–¥–∏—Å—Ç–∞—è –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
            'standard_number': '–ì–û–°–¢ 380-2005',
            'test_type': 'chemical_analysis',
            'material_grades': '20, –°—Ç3, 09–ì2–°',
            'requirements': {
                'C': {'max': 0.22},
                'Si': {'max': 0.17},
                'Mn': {'max': 0.65},
                'P': {'max': 0.040},
                'S': {'max': 0.050}
            },
            'test_method': '–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ì–û–°–¢ 18895'
        },
        {
            'name': '–°—Ç–∞–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–∞—è –ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
            'standard_number': '–ì–û–°–¢ 4543-2016',
            'test_type': 'chemical_analysis',
            'material_grades': '40X, 30–•–ì–°–ê, 12X18H10T',
            'requirements': {
                'C': {'min': 0.37, 'max': 0.44},
                'Cr': {'min': 0.80, 'max': 1.10},
                'P': {'max': 0.035},
                'S': {'max': 0.035}
            },
            'test_method': '–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ì–û–°–¢ 18895'
        },
        {
            'name': '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–∞–ª–∏ –ø—Ä–∏ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–∏',
            'standard_number': '–ì–û–°–¢ 1497-84',
            'test_type': 'mechanical_properties',
            'material_grades': '',  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
            'requirements': {
                'yield_strength': {'min': 235},
                'tensile_strength': {'min': 380},
                'elongation': {'min': 21}
            },
            'test_method': '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –ø–æ –ì–û–°–¢ 1497'
        }
    ]
    
    for std_data in standards_data:
        standard, created = TestStandard.objects.get_or_create(
            standard_number=std_data['standard_number'],
            defaults={
                **std_data,
                'created_by': admin_user,
                'updated_by': admin_user
            }
        )
        
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç: {standard}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    print("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è...")
    
    material_receipts = MaterialReceipt.objects.all()[:3]
    
    test_requests_data = [
        {
            'material_receipt': material_receipts[0] if len(material_receipts) > 0 else None,
            'test_type': 'chemical_analysis',
            'priority': 'high',
            'test_requirements': '–ü–æ–ª–Ω—ã–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢ 380-2005',
            'requested_by': lab_manager,
            'assigned_to': chemist,
            'required_completion_date': datetime.now().date() + timedelta(days=2)
        },
        {
            'material_receipt': material_receipts[1] if len(material_receipts) > 1 else None,
            'test_type': 'mechanical_properties',
            'priority': 'normal',
            'test_requirements': '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ œÉ0.2, œÉ–≤, Œ¥5',
            'requested_by': lab_manager,
            'assigned_to': lab_technician,
            'required_completion_date': datetime.now().date() + timedelta(days=5)
        },
        {
            'material_receipt': material_receipts[2] if len(material_receipts) > 2 else None,
            'test_type': 'ultrasonic',
            'priority': 'urgent',
            'test_requirements': '–£–ó–ö –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤',
            'requested_by': lab_manager,
            'assigned_to': lab_technician,
            'required_completion_date': datetime.now().date() + timedelta(days=1),
            'status': 'in_progress'
        }
    ]
    
    created_requests = []
    for req_data in test_requests_data:
        if req_data['material_receipt']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª –µ—Å—Ç—å
            test_request, created = LabTestRequest.objects.get_or_create(
                material_receipt=req_data['material_receipt'],
                test_type=req_data['test_type'],
                defaults={
                    **req_data,
                    'created_by': req_data['requested_by'],
                    'updated_by': req_data['requested_by']
                }
            )
            created_requests.append(test_request)
            
            if created:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å: {test_request}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–π...")
    
    if created_requests:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        first_request = created_requests[0]
        if first_request.test_type == 'chemical_analysis':
            chemical_result = {
                'chemical_composition': {
                    'C': 0.19,
                    'Si': 0.15,
                    'Mn': 0.58,
                    'P': 0.028,
                    'S': 0.035,
                    'Cr': 0.02,
                    'Ni': 0.03,
                    'Cu': 0.15
                }
            }
            
            test_result, created = LabTestResult.objects.get_or_create(
                test_request=first_request,
                defaults={
                    'performed_by': chemist,
                    'conclusion': 'passed',
                    'certificate_number': f'XA-{datetime.now().strftime("%Y%m%d")}-001',
                    'results': chemical_result,
                    'test_conditions': {
                        'temperature': '20¬±2¬∞C',
                        'humidity': '60¬±5%',
                        'atmosphere': 'argon'
                    },
                    'sample_description': f'–û–±—Ä–∞–∑–µ—Ü —Å—Ç–∞–ª–∏ {first_request.material_receipt.material.material_grade}',
                    'test_method': '–ì–û–°–¢ 18895-97 (–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)',
                    'comments': '–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢ 380-2005',
                    'created_by': chemist,
                    'updated_by': chemist
                }
            )
            
            if created:
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                spectrometer = TestEquipment.objects.filter(equipment_type='spectrometer').first()
                if spectrometer:
                    test_result.equipment_used.add(spectrometer)
                
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_result}")
                first_request.status = 'completed'
                first_request.save()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π
        if len(created_requests) > 1:
            second_request = created_requests[1]
            if second_request.test_type == 'mechanical_properties':
                mechanical_result = {
                    'mechanical_properties': {
                        'yield_strength': 380,  # œÉ0.2, –ú–ü–∞
                        'tensile_strength': 520,  # œÉ–≤, –ú–ü–∞
                        'elongation': 23,  # Œ¥5, %
                        'reduction_of_area': 65,  # œà, %
                        'test_temperature': 20
                    }
                }
                
                test_result, created = LabTestResult.objects.get_or_create(
                    test_request=second_request,
                    defaults={
                        'performed_by': lab_technician,
                        'conclusion': 'passed',
                        'certificate_number': f'MP-{datetime.now().strftime("%Y%m%d")}-001',
                        'results': mechanical_result,
                        'test_conditions': {
                            'temperature': '20¬±2¬∞C',
                            'test_speed': '10 –º–º/–º–∏–Ω'
                        },
                        'sample_description': f'–¶–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–∑–µ—Ü ‚åÄ10–º–º –∏–∑ {second_request.material_receipt.material.material_grade}',
                        'test_method': '–ì–û–°–¢ 1497-84',
                        'comments': '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                        'created_by': lab_technician,
                        'updated_by': lab_technician
                    }
                )
                
                if created:
                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                    tensile_machine = TestEquipment.objects.filter(equipment_type='tensile_machine').first()
                    if tensile_machine:
                        test_result.equipment_used.add(tensile_machine)
                    
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_result}")
                    second_request.status = 'completed'
                    second_request.save()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:")
    print(f"–í—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {TestEquipment.objects.count()}")
    print(f"–ê–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {TestEquipment.objects.filter(is_active=True).count()}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    overdue_count = sum(1 for eq in TestEquipment.objects.all() if eq.is_overdue())
    warning_count = sum(1 for eq in TestEquipment.objects.all() if eq.needs_calibration() and not eq.is_overdue())
    
    print(f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞: {overdue_count}")
    print(f"–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {warning_count}")
    
    print(f"–í—Å–µ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {TestStandard.objects.count()}")
    print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è: {LabTestRequest.objects.count()}")
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π: {LabTestRequest.objects.filter(status='completed').count()}")
    print(f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ: {LabTestRequest.objects.filter(status='in_progress').count()}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–π: {LabTestResult.objects.count()}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    print(f"\nüî¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏—Å–ø—ã—Ç–∞–Ω–∏–π:")
    for test_type, display_name in LabTestRequest.TEST_TYPE_CHOICES:
        count = LabTestRequest.objects.filter(test_type=test_type).count()
        if count > 0:
            print(f"  {display_name}: {count}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    print(f"\n‚öôÔ∏è –°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:")
    for equipment in TestEquipment.objects.all():
        status = equipment.get_calibration_status_display()
        days = equipment.days_until_calibration()
        print(f"  {equipment.name}: {status} ({days} –¥–Ω.)")
    
    print("\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥—É–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã!")
    print("üåê –ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:8000/admin/")
    print("üë§ –õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: admin123")


if __name__ == '__main__':
    create_laboratory_test_data() 