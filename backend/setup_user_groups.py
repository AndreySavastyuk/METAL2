#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User, Group, Permission
from django.contrib.contenttypes.models import ContentType
from apps.warehouse.models import Material, MaterialReceipt, Certificate


def create_user_groups():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã QMS"""
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è MetalQMS...")
    
    # –ì—Ä—É–ø–ø—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
    groups_config = {
        'warehouse': {
            'verbose_name': '–ü–µ—Ä—Å–æ–Ω–∞–ª —Å–∫–ª–∞–¥–∞',
            'description': '–ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –ø—Ä–∏–µ–º–∫–∞–º–∏',
            'permissions': ['add', 'change', 'view', 'delete']
        },
        'warehouse_staff': {
            'verbose_name': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–∫–ª–∞–¥–∞',
            'description': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ —Å–∫–ª–∞–¥–∞ (–∞–ª–∏–∞—Å –¥–ª—è warehouse)',
            'permissions': ['add', 'change', 'view', 'delete']
        },
        'qc': {
            'verbose_name': '–û—Ç–¥–µ–ª –û–¢–ö',
            'description': '–ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞',
            'permissions': ['view', 'change']
        },
        'quality_control': {
            'verbose_name': '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞',
            'description': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –û–¢–ö (–∞–ª–∏–∞—Å –¥–ª—è qc)',
            'permissions': ['view', 'change']
        },
        'lab': {
            'verbose_name': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            'description': '–ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏',
            'permissions': ['view', 'change']
        },
        'laboratory': {
            'verbose_name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–∞–≤–æ–¥—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            'description': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ (–∞–ª–∏–∞—Å –¥–ª—è lab)',
            'permissions': ['view', 'change']
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
    created_groups = []
    for group_name, config in groups_config.items():
        group, created = Group.objects.get_or_create(name=group_name)
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name} ({config['verbose_name']})")
            created_groups.append(group_name)
        else:
            print(f"‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {group_name}")
    
    print(f"\nüìã –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø: {len(created_groups)}")
    return created_groups


def assign_permissions():
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≥—Ä—É–ø–ø–∞–º"""
    
    print("\nüîê –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≥—Ä—É–ø–ø–∞–º...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π
    material_ct = ContentType.objects.get_for_model(Material)
    receipt_ct = ContentType.objects.get_for_model(MaterialReceipt)
    certificate_ct = ContentType.objects.get_for_model(Certificate)
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    permissions_config = {
        'warehouse': {
            'Material': ['add', 'change', 'view', 'delete'],
            'MaterialReceipt': ['add', 'change', 'view', 'delete'],
            'Certificate': ['add', 'change', 'view', 'delete']
        },
        'warehouse_staff': {
            'Material': ['add', 'change', 'view', 'delete'],
            'MaterialReceipt': ['add', 'change', 'view', 'delete'],
            'Certificate': ['add', 'change', 'view', 'delete']
        },
        'qc': {
            'Material': ['view'],
            'MaterialReceipt': ['view', 'change'],
            'Certificate': ['view']
        },
        'quality_control': {
            'Material': ['view'],
            'MaterialReceipt': ['view', 'change'],
            'Certificate': ['view']
        },
        'lab': {
            'Material': ['view'],
            'MaterialReceipt': ['view'],
            'Certificate': ['view', 'change']
        },
        'laboratory': {
            'Material': ['view'],
            'MaterialReceipt': ['view'],
            'Certificate': ['view', 'change']
        }
    }
    
    for group_name, group_permissions in permissions_config.items():
        try:
            group = Group.objects.get(name=group_name)
            
            for model_name, actions in group_permissions.items():
                for action in actions:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                    perm_codename = f"{action}_{model_name.lower()}"
                    
                    try:
                        # –ò—â–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                        if model_name == 'Material':
                            permission = Permission.objects.get(
                                codename=perm_codename,
                                content_type=material_ct
                            )
                        elif model_name == 'MaterialReceipt':
                            permission = Permission.objects.get(
                                codename=perm_codename,
                                content_type=receipt_ct
                            )
                        elif model_name == 'Certificate':
                            permission = Permission.objects.get(
                                codename=perm_codename,
                                content_type=certificate_ct
                            )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ
                        group.permissions.add(permission)
                        print(f"  ‚úÖ {group_name}: {action}_{model_name}")
                        
                    except Permission.DoesNotExist:
                        print(f"  ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {perm_codename}")
                        
        except Group.DoesNotExist:
            print(f"‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {group_name}")


def assign_users_to_groups():
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã"""
    
    print("\nüë• –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã...")
    
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã (–ø–æ username)
    user_group_mapping = {
        'admin': ['warehouse', 'qc', 'lab'],  # –ê–¥–º–∏–Ω –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö
        'warehouse_operator': ['warehouse_staff'],
        'qc_inspector': ['qc', 'quality_control'],
        'lab_manager': ['lab', 'laboratory'],
        'lab_technician': ['lab'],
        'chemist': ['laboratory']
    }
    
    for username, group_names in user_group_mapping.items():
        try:
            user = User.objects.get(username=username)
            
            for group_name in group_names:
                try:
                    group = Group.objects.get(name=group_name)
                    user.groups.add(group)
                    print(f"  ‚úÖ {username} ‚Üí {group_name}")
                except Group.DoesNotExist:
                    print(f"  ‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {group_name}")
                    
        except User.DoesNotExist:
            print(f"  ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {username}")


def create_test_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    
    print("\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    test_users = [
        {
            'username': 'warehouse_operator',
            'email': 'warehouse@metalqms.local',
            'first_name': '–°–∫–ª–∞–¥—Å–∫–æ–π',
            'last_name': '–û–ø–µ—Ä–∞—Ç–æ—Ä',
            'groups': ['warehouse_staff']
        },
        {
            'username': 'qc_inspector',
            'email': 'qc@metalqms.local',
            'first_name': '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä',
            'last_name': '–û–¢–ö',
            'groups': ['qc', 'quality_control']
        },
        {
            'username': 'lab_manager',
            'email': 'lab@metalqms.local',
            'first_name': '–ù–∞—á–∞–ª—å–Ω–∏–∫',
            'last_name': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏',
            'groups': ['lab', 'laboratory']
        }
    ]
    
    for user_data in test_users:
        username = user_data['username']
        groups = user_data.pop('groups')
        
        user, created = User.objects.get_or_create(
            username=username,
            defaults=user_data
        )
        
        if created:
            user.set_password('metalqms123')  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user.save()
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        else:
            print(f"  ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {username}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—ã
        for group_name in groups:
            try:
                group = Group.objects.get(name=group_name)
                user.groups.add(group)
            except Group.DoesNotExist:
                print(f"    ‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {group_name}")


def show_groups_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö"""
    
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–†–£–ü–ü–ê–•")
    print("="*60)
    
    for group in Group.objects.all().order_by('name'):
        print(f"\nüè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group.name}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
        users = group.user_set.all()
        if users:
            print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({users.count()}):")
            for user in users:
                print(f"      - {user.username} ({user.get_full_name() or '–±–µ–∑ –∏–º–µ–Ω–∏'})")
        else:
            print("   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        permissions = group.permissions.all()
        if permissions:
            print(f"   üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏—è ({permissions.count()}):")
            for perm in permissions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"      - {perm.codename}")
            if permissions.count() > 5:
                print(f"      ... –∏ –µ—â–µ {permissions.count() - 5}")
        else:
            print("   üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç")


def test_permissions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–ô")
    print("="*60)
    
    from apps.warehouse.permissions import is_warehouse_staff, is_qc_inspector, is_lab_technician
    
    test_users = ['admin', 'warehouse_operator', 'qc_inspector', 'lab_manager']
    
    for username in test_users:
        try:
            user = User.objects.get(username=username)
            print(f"\nüë§ {username}:")
            print(f"   üì¶ –°–∫–ª–∞–¥: {'‚úÖ' if is_warehouse_staff(user) else '‚ùå'}")
            print(f"   üîç –û–¢–ö: {'‚úÖ' if is_qc_inspector(user) else '‚ùå'}")
            print(f"   üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: {'‚úÖ' if is_lab_technician(user) else '‚ùå'}")
            print(f"   üîí –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {'‚úÖ' if user.is_superuser else '‚ùå'}")
            
        except User.DoesNotExist:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {username}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ MetalQMS")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
    created_groups = create_user_groups()
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    assign_permissions()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    create_test_users()
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã
    assign_users_to_groups()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    show_groups_summary()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    test_permissions()
    
    print("\n" + "="*60)
    print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –†–û–õ–ï–í–û–ô –ú–û–î–ï–õ–ò –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*60)
    print("\nüìö –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏:")
    print("   üì¶ warehouse/warehouse_staff - –ü–µ—Ä—Å–æ–Ω–∞–ª —Å–∫–ª–∞–¥–∞")
    print("   üîç qc/quality_control - –û—Ç–¥–µ–ª –û–¢–ö")
    print("   üß™ lab/laboratory - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è")
    print("\nüîë –î–æ—Å—Ç—É–ø—ã:")
    print("   - admin / admin (–≤—Å–µ –ø—Ä–∞–≤–∞)")
    print("   - warehouse_operator / metalqms123 (—Å–∫–ª–∞–¥)")
    print("   - qc_inspector / metalqms123 (–û–¢–ö)")
    print("   - lab_manager / metalqms123 (–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è)")
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å —Ä–æ–ª—è–º–∏ –≥–æ—Ç–æ–≤–æ!")


if __name__ == '__main__':
    main() 