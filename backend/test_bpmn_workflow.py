#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BPMN workflow —Å django-viewflow
"""
import os
import sys
import django
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from django.utils import timezone
from apps.warehouse.models import Material, MaterialReceipt
from apps.workflow.models import MaterialInspectionProcess, WorkflowTaskLog, WorkflowSLAViolation
from apps.workflow.flows import MaterialInspectionFlow
from apps.workflow.signals import determine_process_priority, determine_testing_requirements
from apps.quality.models import QCInspection
from apps.laboratory.models import LabTestRequest


def create_test_material():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è workflow"""
    
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.objects.get(username='warehouse_operator')
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ü–ü–°–î –∏ –£–ó–ö
    material = Material.objects.create(
        material_grade='12X18H10T',
        supplier='–¢–µ—Å—Ç–ü–æ—Å—Ç–∞–≤—â–∏–∫',
        order_number=f'ORDER-WORKFLOW-{datetime.now().strftime("%H%M%S")}',
        certificate_number=f'CERT-WORKFLOW-{datetime.now().strftime("%H%M%S")}',
        heat_number='HEAT-WF-12345',
        size='‚åÄ150',
        quantity=500.0,
        unit='kg',
        location='–°–∫–ª–∞–¥ –ê1',
        receipt_date=timezone.now(),
        created_by=user,
        updated_by=user
    )
    
    print(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {material.material_grade} - {material.supplier}")
    return material


def test_workflow_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è workflow –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    
    print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø WORKFLOW –ü–†–û–¶–ï–°–°–ê")
    print("=" * 60)
    
    material = create_test_material()
    user = User.objects.get(username='warehouse_operator')
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¥–æ–ª–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å workflow)
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...")
    
    receipt = MaterialReceipt.objects.create(
        material=material,
        received_by=user,
        document_number=f'DOC-WORKFLOW-{datetime.now().strftime("%H%M%S")}',
        status='pending_qc',
        notes='–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏–µ–º–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ workflow',
        created_by=user,
        updated_by=user
    )
    
    print(f"‚úÖ –ü—Ä–∏–µ–º–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {receipt.document_number}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å workflow —Å–æ–∑–¥–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    try:
        process = MaterialInspectionProcess.objects.get(material_receipt=receipt)
        print(f"‚úÖ Workflow –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω: #{process.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print(f"   üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {process.get_priority_display()}")
        print(f"   üß™ –ü–ü–°–î: {'–î–∞' if process.requires_ppsd else '–ù–µ—Ç'}")
        print(f"   üì° –£–ó–ö: {'–î–∞' if process.requires_ultrasonic else '–ù–µ—Ç'}")
        print(f"   ‚è∞ SLA deadline: {process.sla_deadline}")
        print(f"   üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {process.initiator.username}")
        print(f"   üë§ –¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {process.current_assignee.username if process.current_assignee else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        logs = process.task_logs.all()
        print(f"   üìã –°–æ–∑–¥–∞–Ω–æ –ª–æ–≥–æ–≤: {logs.count()}")
        for log in logs:
            print(f"     ‚Ä¢ {log.task_name}: {log.get_action_display()} - {log.performer.username}")
        
        return process
        
    except MaterialInspectionProcess.DoesNotExist:
        print("‚ùå Workflow –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return None


def test_priority_determination():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    
    print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ò–û–†–ò–¢–ï–¢–ê")
    print("=" * 40)
    
    user = User.objects.get(username='warehouse_operator')
    
    test_cases = [
        # (material_grade, quantity, supplier, expected_priority)
        ('12X18H10T', 100, '–û–±—ã—á–Ω—ã–π–ü–æ—Å—Ç–∞–≤—â–∏–∫', 'high'),  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
        ('40X', 1500, '–û–±—ã—á–Ω—ã–π–ü–æ—Å—Ç–∞–≤—â–∏–∫', 'high'),       # –ë–æ–ª—å—à–∞—è –ø–∞—Ä—Ç–∏—è
        ('09–ì2–°', 200, '–°–ø–µ—Ü–°—Ç–∞–ª—å', 'high'),             # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫
        ('ST3', 50, '–û–±—ã—á–Ω—ã–π–ü–æ—Å—Ç–∞–≤—â–∏–∫', 'normal'),       # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π
    ]
    
    for material_grade, quantity, supplier, expected_priority in test_cases:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        material = Material.objects.create(
            material_grade=material_grade,
            supplier=supplier,
            order_number=f'ORDER-{material_grade}-{datetime.now().strftime("%H%M%S")}',
            certificate_number=f'CERT-{material_grade}',
            heat_number='HEAT-TEST',
            size='‚åÄ100',
            quantity=quantity,
            unit='kg',
            location='–°–∫–ª–∞–¥ –ê1',
            receipt_date=timezone.now(),
            created_by=user,
            updated_by=user
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º–∫—É
        receipt = MaterialReceipt.objects.create(
            material=material,
            received_by=user,
            document_number=f'DOC-{material_grade}',
            created_by=user,
            updated_by=user
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority = determine_process_priority(receipt)
        
        print(f"üîç {material_grade} ({quantity}–∫–≥, {supplier})")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π: {expected_priority}")
        print(f"   –ü–æ–ª—É—á–µ–Ω: {priority}")
        print(f"   {'‚úÖ OK' if priority == expected_priority else '‚ùå FAIL'}")


def test_requirements_determination():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ü–ü–°–î/–£–ó–ö"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–†–ï–ë–û–í–ê–ù–ò–ô")
    print("=" * 40)
    
    user = User.objects.get(username='warehouse_operator')
    
    test_cases = [
        # (material_grade, size, expected_ppsd, expected_uzk)
        ('12X18H10T', '‚åÄ150', True, True),    # –ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ - –∏ –ü–ü–°–î, –∏ –£–ó–ö
        ('40X', '‚åÄ75', False, True),          # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–∞—è - —Ç–æ–ª—å–∫–æ –£–ó–ö
        ('09–ì2–°', '‚åÄ50', False, False),       # –û–±—ã—á–Ω–∞—è - –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç
        ('20X13', '–ª–∏—Å—Ç 15–º–º', True, True),   # –ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ –ª–∏—Å—Ç - –∏ –ü–ü–°–î, –∏ –£–ó–ö
    ]
    
    for material_grade, size, expected_ppsd, expected_uzk in test_cases:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        material = Material.objects.create(
            material_grade=material_grade,
            supplier='–¢–µ—Å—Ç–ü–æ—Å—Ç–∞–≤—â–∏–∫',
            order_number=f'ORDER-REQ-{datetime.now().strftime("%H%M%S")}',
            certificate_number=f'CERT-REQ-{material_grade}',
            heat_number='HEAT-REQ',
            size=size,
            quantity=100,
            unit='kg',
            location='–°–∫–ª–∞–¥ –ê1',
            receipt_date=timezone.now(),
            created_by=user,
            updated_by=user
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º–∫—É
        receipt = MaterialReceipt.objects.create(
            material=material,
            received_by=user,
            document_number=f'DOC-REQ-{material_grade}',
            created_by=user,
            updated_by=user
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        requires_ppsd, requires_uzk = determine_testing_requirements(receipt)
        
        print(f"üîç {material_grade} {size}")
        print(f"   –ü–ü–°–î: –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_ppsd}, –ø–æ–ª—É—á–µ–Ω {requires_ppsd} {'‚úÖ' if expected_ppsd == requires_ppsd else '‚ùå'}")
        print(f"   –£–ó–ö: –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_uzk}, –ø–æ–ª—É—á–µ–Ω {requires_uzk} {'‚úÖ' if expected_uzk == requires_uzk else '‚ùå'}")


def test_sla_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ SLA"""
    
    print("\n‚è∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ß–ï–¢–ê SLA")
    print("=" * 30)
    
    process = MaterialInspectionProcess.objects.first()
    if not process:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SLA")
        return
    
    print(f"üîç –ü—Ä–æ—Ü–µ—Å—Å #{process.id}")
    print(f"   üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {process.get_priority_display()}")
    print(f"   üß™ –ü–ü–°–î: {'–î–∞' if process.requires_ppsd else '–ù–µ—Ç'}")
    print(f"   üì° –£–ó–ö: {'–î–∞' if process.requires_ultrasonic else '–ù–µ—Ç'}")
    print(f"   ‚è∞ –ù–∞—á–∞—Ç: {process.started_at}")
    print(f"   ‚è∞ SLA deadline: {process.sla_deadline}")
    
    if process.sla_deadline:
        time_remaining = process.get_time_remaining()
        sla_status = process.get_sla_status()
        
        print(f"   ‚è±Ô∏è –û—Å—Ç–∞–µ—Ç—Å—è: {time_remaining}")
        print(f"   üö¶ –°—Ç–∞—Ç—É—Å SLA: {sla_status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ SLA –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        old_deadline = process.sla_deadline
        old_priority = process.priority
        
        process.priority = MaterialInspectionProcess.PRIORITY_CHOICES.URGENT
        process.sla_deadline = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
        process.save()
        
        new_deadline = process.sla_deadline
        
        print(f"   üö® –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ URGENT:")
        print(f"     –°—Ç–∞—Ä—ã–π deadline: {old_deadline}")
        print(f"     –ù–æ–≤—ã–π deadline: {new_deadline}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        process.priority = old_priority
        process.sla_deadline = old_deadline
        process.save()


def test_workflow_transitions():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ workflow"""
    
    print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–•–û–î–û–í WORKFLOW")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    process = MaterialInspectionProcess.objects.filter(
        status=MaterialInspectionProcess.STATUS.ACTIVE
    ).first()
    
    if not process:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
        return
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å #{process.id}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ü–∏—é –û–¢–ö
    qc_inspector = User.objects.get(username='qc_inspector')
    
    qc_inspection, created = QCInspection.objects.get_or_create(
        material_receipt=process.material_receipt,
        defaults={
            'inspector': qc_inspector,
            'status': 'draft',
            'requires_ppsd': process.requires_ppsd,
            'requires_ultrasonic': process.requires_ultrasonic,
            'created_by': qc_inspector,
            'updated_by': qc_inspector,
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏—è –û–¢–ö #{qc_inspection.id}")
    else:
        print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é –û–¢–ö #{qc_inspection.id}")
    
    print(f"   üìä –°—Ç–∞—Ç—É—Å: {qc_inspection.get_status_display()}")
    print(f"   üß™ –ü–ü–°–î: {'–î–∞' if qc_inspection.requires_ppsd else '–ù–µ—Ç'}")
    print(f"   üì° –£–ó–ö: {'–î–∞' if qc_inspection.requires_ultrasonic else '–ù–µ—Ç'}")
    
    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏
    if process.requires_ppsd:
        lab_requests = []
        for test_type in ['chemical_analysis', 'mechanical_properties']:
            lab_request, created = LabTestRequest.objects.get_or_create(
                material_receipt=process.material_receipt,
                test_type=test_type,
                defaults={
                    'requested_by': qc_inspector,
                    'status': 'pending',
                    'priority': 'normal',
                    'internal_testing': True,
                    'test_requirements': f'–ü–ü–°–î - {test_type}',
                    'created_by': qc_inspector,
                    'updated_by': qc_inspector,
                }
            )
            lab_requests.append(lab_request)
            if created:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {lab_request.get_test_type_display()}")
    
    if process.requires_ultrasonic:
        lab_request, created = LabTestRequest.objects.get_or_create(
            material_receipt=process.material_receipt,
            test_type='ultrasonic',
            defaults={
                'requested_by': qc_inspector,
                'status': 'pending',
                'priority': 'normal',
                'internal_testing': True,
                'test_requirements': '–£–ó–ö —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢ 14782',
                'created_by': qc_inspector,
                'updated_by': qc_inspector,
            }
        )
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –£–ó–ö")


def test_sla_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SLA"""
    
    print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê SLA")
    print("=" * 35)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º SLA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user = User.objects.get(username='warehouse_operator')
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    material = Material.objects.create(
        material_grade='TEST-SLA',
        supplier='–¢–µ—Å—Ç–ü–æ—Å—Ç–∞–≤—â–∏–∫',
        order_number=f'ORDER-SLA-{datetime.now().strftime("%H%M%S")}',
        certificate_number='CERT-SLA-TEST',
        heat_number='HEAT-SLA',
        size='‚åÄ100',
        quantity=100,
        unit='kg',
        location='–°–∫–ª–∞–¥ –ê1',
        receipt_date=timezone.now(),
        created_by=user,
        updated_by=user
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º–∫—É
    receipt = MaterialReceipt.objects.create(
        material=material,
        received_by=user,
        document_number='DOC-SLA-TEST',
        created_by=user,
        updated_by=user
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    process = MaterialInspectionProcess.objects.get(material_receipt=receipt)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π SLA
    process.sla_deadline = timezone.now() - timedelta(hours=1)
    process.save()
    
    print(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å #{process.id} —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º SLA")
    print(f"   ‚è∞ SLA deadline: {process.sla_deadline}")
    print(f"   üö¶ –°—Ç–∞—Ç—É—Å SLA: {process.get_sla_status()}")
    print(f"   üìä –ü—Ä–æ—Å—Ä–æ—á–µ–Ω: {'–î–∞' if process.is_overdue() else '–ù–µ—Ç'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    from apps.workflow.tasks import check_process_sla
    
    violation_created, warning_sent = check_process_sla(process)
    
    print(f"   üìù –°–æ–∑–¥–∞–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {'–î–∞' if violation_created else '–ù–µ—Ç'}")
    print(f"   üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {'–î–∞' if warning_sent else '–ù–µ—Ç'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è SLA
    violations = process.sla_violations.all()
    print(f"   ‚ö†Ô∏è –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π SLA: {violations.count()}")
    
    for violation in violations:
        print(f"     ‚Ä¢ {violation.get_violation_type_display()}: {violation.message}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BPMN WORKFLOW")
    print("=" * 80)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        required_users = ['warehouse_operator', 'qc_inspector', 'lab_manager']
        for username in required_users:
            try:
                User.objects.get(username=username)
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω")
            except User.DoesNotExist:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        process = test_workflow_creation()
        
        if process:
            test_priority_determination()
            test_requirements_determination()
            test_sla_calculation()
            test_workflow_transitions()
            test_sla_monitoring()
        
        print(f"\n{'=' * 80}")
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BPMN WORKFLOW –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 80)
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   üîß MaterialInspectionFlow - BPMN –ø—Ä–æ—Ü–µ—Å—Å")
        print("   üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
        print("   üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ü–ü–°–î/–£–ó–ö")
        print("   ‚è∞ –†–∞—Å—á–µ—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SLA")
        print("   üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è workflow")
        print("   üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π")
        print("   ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π SLA")
        print("   üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è")
        
        print("\nüéØ BPMN —É–∑–ª—ã:")
        print("   üèÅ Start: Material receipt")
        print("   üìã Task: QC inspection")
        print("   üîÄ Gateway: Needs PPSD?")
        print("   üß™ Task: PPSD testing")
        print("   üîÄ Gateway: Needs ultrasonic?")
        print("   üì° Task: Ultrasonic testing")
        print("   üè≠ Task: Production prep")
        print("   ‚úÖ End: Material approved")
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        total_processes = MaterialInspectionProcess.objects.count()
        total_logs = WorkflowTaskLog.objects.count()
        total_violations = WorkflowSLAViolation.objects.count()
        
        print(f"   üìã –í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {total_processes}")
        print(f"   üìù –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {total_logs}")
        print(f"   ‚ö†Ô∏è –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π SLA: {total_violations}")
        
        print("\nüåê BPMN Workflow –≥–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()