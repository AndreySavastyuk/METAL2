#!/usr/bin/env python3
"""
üöÄ MetalQMS - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –º–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏
–£–¥–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏

–ê–≤—Ç–æ—Ä: MetalQMS Team
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import sys
import time
import subprocess
import threading
import signal
import json
from datetime import datetime
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_colored(text, color=Colors.OKGREEN):
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    print(f"{color}{text}{Colors.ENDC}")

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                              ‚ïë
‚ïë    üè≠ MetalQMS - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –º–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏               ‚ïë
‚ïë                                                                              ‚ïë
‚ïë    üìä Workflow: –°–∫–ª–∞–¥ ‚Üí –û–¢–ö ‚Üí –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ‚Üí –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ                    ‚ïë
‚ïë    üîß Tech Stack: Django + React + PostgreSQL + Redis                       ‚ïë
‚ïë    üì± Telegram Bot | üìà Monitoring | üíæ Auto Backup                        ‚ïë
‚ïë                                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print_colored(banner, Colors.HEADER)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_colored("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...", Colors.OKCYAN)
    
    dependencies = {
        'python': 'python --version',
        'node': 'node --version', 
        'npm': 'npm --version'
    }
    
    missing = []
    for dep, cmd in dependencies.items():
        try:
            result = subprocess.run(cmd.split(), capture_output=True, text=True, shell=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ stdout –∏ stderr, npm –∏–Ω–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç –≤ stderr
            version = result.stdout.strip() or result.stderr.strip()
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ 0), —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞
            if result.returncode == 0:
                if version:
                    print_colored(f"  ‚úÖ {dep}: {version}", Colors.OKGREEN)
                else:
                    # –î–∞–∂–µ –µ—Å–ª–∏ –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç, –Ω–æ –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ 0 - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞
                    print_colored(f"  ‚úÖ {dep}: –Ω–∞–π–¥–µ–Ω (–≤–µ—Ä—Å–∏—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å)", Colors.OKGREEN)
            else:
                print_colored(f"  ‚ùå {dep}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–¥ –æ—à–∏–±–∫–∏: {result.returncode})", Colors.FAIL)
                missing.append(dep)
                
        except FileNotFoundError:
            print_colored(f"  ‚ùå {dep}: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", Colors.FAIL)
            missing.append(dep)
        except Exception as e:
            print_colored(f"  ‚ùå {dep}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({str(e)})", Colors.FAIL)
            missing.append(dep)
    
    if missing:
        print_colored(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}", Colors.FAIL)
        print_colored("üí° –°–æ–≤–µ—Ç: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ PATH", Colors.WARNING)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–ª—å–∫–æ npm, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ backend
        if missing == ['npm']:
            print_colored("üîß –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend: cd backend && python manage.py runserver", Colors.WARNING)
            return True  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ npm
        
        return False
    
    return True

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_colored("\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...", Colors.OKCYAN)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    directories = [
        'logs',
        'media',
        'media/qr_codes',
        'media/certificates', 
        'media/test_results',
        'uploads',
        'uploads/certificates',
        'uploads/test_results',
        'backups'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print_colored(f"  üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}", Colors.OKGREEN)

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_colored("\nüóÉÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", Colors.OKCYAN)
    
    backend_dir = Path('backend')
    if not backend_dir.exists():
        print_colored("  ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", Colors.FAIL)
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    try:
        os.chdir(backend_dir)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ Django –≤–æ–æ–±—â–µ
        check_result = subprocess.run([
            sys.executable, 'manage.py', 'check'
        ], capture_output=True, text=True)
        
        if check_result.returncode != 0:
            print_colored("  üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Django...", Colors.WARNING)
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö
            subprocess.run([
                sys.executable, 'manage.py', 'makemigrations'
            ], capture_output=True)
            
            migrate_result = subprocess.run([
                sys.executable, 'manage.py', 'migrate'
            ], capture_output=True, text=True)
            
            if migrate_result.returncode == 0:
                print_colored("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", Colors.OKGREEN)
            else:
                print_colored("  ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...", Colors.WARNING)
        else:
            # Django —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            result = subprocess.run([
                sys.executable, 'manage.py', 'showmigrations', '--plan'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                if 'UNAPPLIED' in result.stdout:
                    print_colored("  üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...", Colors.WARNING)
                    subprocess.run([
                        sys.executable, 'manage.py', 'migrate'
                    ])
                    print_colored("  ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", Colors.OKGREEN)
                else:
                    print_colored("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞", Colors.OKGREEN)
            else:
                print_colored("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...", Colors.WARNING)
        
        os.chdir('..')
        return True
        
    except Exception as e:
        print_colored(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", Colors.WARNING)
        print_colored("  ‚ÑπÔ∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π...", Colors.OKCYAN)
        try:
            os.chdir('..')
        except:
            pass
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

def create_superuser():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print_colored("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...", Colors.OKCYAN)
    
    try:
        os.chdir('backend')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        check_script = """
from django.contrib.auth import get_user_model
User = get_user_model()
if User.objects.filter(is_superuser=True).exists():
    print('EXISTS')
else:
    print('NOT_EXISTS')
"""
        
        result = subprocess.run([
            sys.executable, 'manage.py', 'shell', '-c', check_script
        ], capture_output=True, text=True, check=True)
        
        if 'EXISTS' in result.stdout:
            print_colored("  ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", Colors.OKGREEN)
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            create_script = """
from django.contrib.auth import get_user_model
User = get_user_model()
User.objects.create_superuser('admin', 'admin@metalqms.com', 'admin123')
print('Superuser created: admin/admin123')
"""
            subprocess.run([
                sys.executable, 'manage.py', 'shell', '-c', create_script
            ], check=True)
            print_colored("  ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin/admin123", Colors.OKGREEN)
        
        os.chdir('..')
        
    except subprocess.CalledProcessError as e:
        print_colored(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}", Colors.FAIL)
        os.chdir('..')

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_colored("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...", Colors.OKCYAN)
    
    # Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print_colored("  üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤...", Colors.OKCYAN)
    try:
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ], check=True, capture_output=True)
        print_colored("  ‚úÖ Python –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.OKGREEN)
    except subprocess.CalledProcessError:
        print_colored("  ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –ø–∞–∫–µ—Ç–æ–≤", Colors.FAIL)
        return False
    
    # Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ npm –¥–æ—Å—Ç—É–ø–µ–Ω
    frontend_dir = Path('frontend')
    if frontend_dir.exists():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å npm –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        try:
            result = subprocess.run(['npm', '--version'], capture_output=True, text=True, shell=True)
            if result.returncode == 0:
                print_colored("  üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –ø–∞–∫–µ—Ç–æ–≤...", Colors.OKCYAN)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ node_modules
                node_modules = frontend_dir / 'node_modules'
                if node_modules.exists():
                    print_colored("  ‚úÖ Node.js –ø–∞–∫–µ—Ç—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.OKGREEN)
                else:
                    print_colored("  üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –ø–∞–∫–µ—Ç–æ–≤...", Colors.OKCYAN)
                    try:
                        os.chdir(frontend_dir)
                        subprocess.run(['npm', 'install'], check=True, capture_output=True)
                        print_colored("  ‚úÖ Node.js –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.OKGREEN)
                        os.chdir('..')
                    except subprocess.CalledProcessError:
                        print_colored("  ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –ø–∞–∫–µ—Ç–æ–≤", Colors.FAIL)
                        os.chdir('..')
                        print_colored("  ‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ frontend –ø–∞–∫–µ—Ç–æ–≤", Colors.WARNING)
            else:
                print_colored("  ‚ö†Ô∏è  npm –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Node.js –ø–∞–∫–µ—Ç–æ–≤", Colors.WARNING)
        except FileNotFoundError:
            print_colored("  ‚ö†Ô∏è  npm –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Node.js –ø–∞–∫–µ—Ç–æ–≤", Colors.WARNING)
    else:
        print_colored("  ‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Node.js –ø–∞–∫–µ—Ç—ã", Colors.OKCYAN)
    
    return True

def load_test_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print_colored("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", Colors.OKCYAN)
    
    try:
        os.chdir('backend')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        check_script = """
from apps.warehouse.models import Material
count = Material.objects.count()
print(f'MATERIALS_COUNT:{count}')
"""
        
        result = subprocess.run([
            sys.executable, 'manage.py', 'shell', '-c', check_script
        ], capture_output=True, text=True, check=True)
        
        count = 0
        for line in result.stdout.split('\n'):
            if 'MATERIALS_COUNT:' in line:
                count = int(line.split(':')[1])
                break
        
        if count > 0:
            print_colored(f"  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)", Colors.OKGREEN)
        else:
            print_colored("  üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", Colors.WARNING)
            subprocess.run([
                sys.executable, 'manage.py', 'loaddata', 'fixtures/test_data.json'
            ], check=True)
            print_colored("  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", Colors.OKGREEN)
        
        os.chdir('..')
        
    except subprocess.CalledProcessError as e:
        print_colored(f"  ‚ö†Ô∏è  –§–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...", Colors.WARNING)
        os.chdir('..')

class ProcessManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è backend –∏ frontend"""
    
    def __init__(self):
        self.processes = {}
        self.running = True
        self.frontend_running = False
        
    def start_backend(self):
        """–ó–∞–ø—É—Å–∫ Django backend"""
        print_colored("\nüêç –ó–∞–ø—É—Å–∫ Django Backend...", Colors.OKCYAN)
        
        env = os.environ.copy()
        env['PYTHONUNBUFFERED'] = '1'
        # –î–æ–±–∞–≤–ª—è–µ–º backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
        backend_path = os.path.abspath('backend')
        if 'PYTHONPATH' in env:
            env['PYTHONPATH'] = f"{backend_path}{os.pathsep}{env['PYTHONPATH']}"
        else:
            env['PYTHONPATH'] = backend_path
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Django –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        backend_process = subprocess.Popen([
            sys.executable, 'manage.py', 'runserver', '127.0.0.1:8000'
        ], cwd='backend', stdout=subprocess.PIPE, stderr=subprocess.STDOUT, 
           universal_newlines=True, env=env, bufsize=1)
        
        self.processes['backend'] = backend_process
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ backend
        def monitor_backend():
            for line in iter(backend_process.stdout.readline, ''):
                if not self.running:
                    break
                if line.strip():
                    timestamp = datetime.now().strftime('%H:%M:%S')
                    if 'ERROR' in line.upper() or 'EXCEPTION' in line.upper():
                        print_colored(f"[{timestamp}] üî¥ BACKEND: {line.strip()}", Colors.FAIL)
                    elif 'WARNING' in line.upper():
                        print_colored(f"[{timestamp}] üü° BACKEND: {line.strip()}", Colors.WARNING)
                    elif '"GET' in line or '"POST' in line:
                        print_colored(f"[{timestamp}] üåê BACKEND: {line.strip()}", Colors.OKCYAN)
                    else:
                        print_colored(f"[{timestamp}] üêç BACKEND: {line.strip()}", Colors.OKGREEN)
        
        backend_thread = threading.Thread(target=monitor_backend, daemon=True)
        backend_thread.start()
        
        print_colored("  ‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000", Colors.OKGREEN)
        
    def check_frontend_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print_colored("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...", Colors.OKCYAN)
        
        frontend_dir = Path('frontend')
        if not frontend_dir.exists():
            print_colored("  ‚ùå Frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", Colors.FAIL)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
        package_json = frontend_dir / 'package.json'
        if package_json.exists():
            print_colored("  ‚úÖ package.json –Ω–∞–π–¥–µ–Ω", Colors.OKGREEN)
        else:
            print_colored("  ‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.FAIL)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules
        node_modules = frontend_dir / 'node_modules'
        if node_modules.exists():
            print_colored("  ‚úÖ node_modules –Ω–∞–π–¥–µ–Ω", Colors.OKGREEN)
        else:
            print_colored("  ‚ö†Ô∏è  node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...", Colors.WARNING)
            try:
                subprocess.run(['npm', 'install'], cwd=frontend_dir, check=True, capture_output=True)
                print_colored("  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.OKGREEN)
            except subprocess.CalledProcessError:
                print_colored("  ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", Colors.FAIL)
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        important_files = [
            'src/main.tsx',
            'src/App.tsx', 
            'vite.config.ts',
            'index.html'
        ]
        
        for file_path in important_files:
            file_full_path = frontend_dir / file_path
            if file_full_path.exists():
                print_colored(f"  ‚úÖ {file_path} –Ω–∞–π–¥–µ–Ω", Colors.OKGREEN)
            else:
                print_colored(f"  ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.FAIL)
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ts_config = frontend_dir / 'tsconfig.json'
        if ts_config.exists():
            print_colored("  ‚úÖ tsconfig.json –Ω–∞–π–¥–µ–Ω", Colors.OKGREEN)
        else:
            print_colored("  ‚ö†Ô∏è  tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.WARNING)
        
        return True
    
    def start_frontend(self):
        """–ó–∞–ø—É—Å–∫ React frontend"""
        frontend_dir = Path('frontend')
        if not frontend_dir.exists():
            print_colored("  ‚ö†Ô∏è  Frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", Colors.WARNING)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å npm –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        try:
            result = subprocess.run(['npm', '--version'], capture_output=True, text=True, shell=True)
            if result.returncode != 0:
                print_colored("  ‚ö†Ô∏è  npm –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ frontend", Colors.WARNING)
                return
        except FileNotFoundError:
            print_colored("  ‚ö†Ô∏è  npm –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ frontend", Colors.WARNING)
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è frontend
        if not self.check_frontend_health():
            print_colored("  ‚ùå Frontend –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É", Colors.FAIL)
            return
            
        print_colored("\n‚öõÔ∏è  –ó–∞–ø—É—Å–∫ React Frontend...", Colors.OKCYAN)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è frontend
        env = os.environ.copy()
        env['VITE_API_BASE_URL'] = 'http://127.0.0.1:8000'
        env['NODE_ENV'] = 'development'
        
        try:
            frontend_process = subprocess.Popen([
                'npm', 'run', 'dev'
            ], cwd=frontend_dir, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
               universal_newlines=True, bufsize=1, env=env, shell=True)
            
            self.processes['frontend'] = frontend_process
            self.frontend_running = True
            print_colored("  ‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000", Colors.OKGREEN)
        except FileNotFoundError:
            print_colored("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å frontend (npm –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)", Colors.WARNING)
            return
        except Exception as e:
            print_colored(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ frontend: {e}", Colors.FAIL)
            return
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ frontend
        def monitor_frontend():
            for line in iter(frontend_process.stdout.readline, ''):
                if not self.running:
                    break
                if line.strip():
                    timestamp = datetime.now().strftime('%H:%M:%S')
                    if 'error' in line.lower() or 'failed' in line.lower():
                        print_colored(f"[{timestamp}] üî¥ FRONTEND: {line.strip()}", Colors.FAIL)
                    elif 'warning' in line.lower():
                        print_colored(f"[{timestamp}] üü° FRONTEND: {line.strip()}", Colors.WARNING)
                    elif 'Local:' in line or 'ready in' in line.lower():
                        print_colored(f"[{timestamp}] üöÄ FRONTEND: {line.strip()}", Colors.OKGREEN)
                    else:
                        print_colored(f"[{timestamp}] ‚öõÔ∏è  FRONTEND: {line.strip()}", Colors.OKCYAN)
        
        frontend_thread = threading.Thread(target=monitor_frontend, daemon=True)
        frontend_thread.start()
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print_colored("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...", Colors.WARNING)
        self.running = False
        
        for name, process in self.processes.items():
            if process and process.poll() is None:
                print_colored(f"  üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...", Colors.WARNING)
                process.terminate()
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    process.kill()
                print_colored(f"  ‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", Colors.OKGREEN)

def test_system_health():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print_colored("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...", Colors.OKCYAN)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    try:
        import requests
        response = requests.get('http://127.0.0.1:8000/health/', timeout=5)
        if response.status_code == 200:
            print_colored("  ‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç", Colors.OKGREEN)
        else:
            print_colored(f"  ‚ö†Ô∏è  Backend –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}", Colors.WARNING)
    except ImportError:
        print_colored("  ‚ÑπÔ∏è  requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É backend", Colors.OKCYAN)
    except Exception as e:
        print_colored(f"  ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}", Colors.FAIL)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    try:
        response = requests.get('http://localhost:3000/', timeout=5)
        if response.status_code == 200:
            print_colored("  ‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç", Colors.OKGREEN)
        else:
            print_colored(f"  ‚ö†Ô∏è  Frontend –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}", Colors.WARNING)
    except ImportError:
        pass  # –£–∂–µ —Å–æ–æ–±—â–∏–ª–∏ –≤—ã—à–µ
    except Exception as e:
        print_colored(f"  ‚ö†Ô∏è  Frontend –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–º–æ–∂–µ—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è)", Colors.WARNING)


def show_info(frontend_running=True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö URL"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ backend
    info = """
üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:

üêç Backend API (Django):      http://127.0.0.1:8000  
üìä Admin Panel:               http://127.0.0.1:8000/admin
üîß API Documentation:         http://127.0.0.1:8000/api/docs/
üíö Health Check:              http://127.0.0.1:8000/health/
üìà Metrics:                   http://127.0.0.1:8000/metrics/"""
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ frontend (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
    if frontend_running:
        info += """
üì± Frontend (React):          http://localhost:3000"""
    else:
        info += """
‚ö†Ô∏è  Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (npm –Ω–µ –Ω–∞–π–¥–µ–Ω)"""
    
    info += """

üë§ –î–æ—Å—Ç—É–ø—ã:
   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123
   
üìã –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–æ–ª–∏:
   –°–∫–ª–∞–¥:       warehouse / test123
   –û–¢–ö:         qc / test123  
   –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: lab / test123"""
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –Ω–∞–ª–∏—á–∏–µ frontend)
    if frontend_running:
        info += """

üéØ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è:
   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:     http://localhost:3000/materials
   –ò–Ω—Å–ø–µ–∫—Ü–∏–∏:     http://localhost:3000/qc/inspections
   –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è:   http://localhost:3000/laboratory"""
    else:
        info += """

üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:
   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:     http://127.0.0.1:8000/api/materials/
   –ò–Ω—Å–ø–µ–∫—Ü–∏–∏:     http://127.0.0.1:8000/api/inspections/
   API Root:      http://127.0.0.1:8000/api/"""
    
    info += """

üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ./docs/
üíæ –õ–æ–≥–∏:         ./logs/
üîß Monitoring:   Prometheus + Grafana –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É
    """
    
    print_colored(info, Colors.OKCYAN)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_dependencies():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not check_database():
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_superuser()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    load_test_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    process_manager = ProcessManager()
    
    def signal_handler(signum, frame):
        process_manager.stop_all()
        print_colored("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", Colors.OKCYAN)
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    process_manager.start_backend()
    time.sleep(3)  # –î–∞–µ–º backend –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    process_manager.start_frontend()
    time.sleep(3)  # –î–∞–µ–º frontend –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    show_info(frontend_running=process_manager.frontend_running)
    
    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(5)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    test_system_health()
    
    if process_manager.frontend_running:
        print_colored("\nüéâ MetalQMS –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...", Colors.OKGREEN)
        print_colored("üåü –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ: Frontend + Backend", Colors.OKGREEN)
    else:
        print_colored("\nüéâ MetalQMS Backend –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...", Colors.OKGREEN)
        print_colored("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ frontend —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", Colors.WARNING)
    
    # –û–∂–∏–¥–∞–Ω–∏–µ
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        process_manager.stop_all()
        print_colored("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", Colors.OKCYAN)

if __name__ == '__main__':
    main()